<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>raycoarana.com</title>
   
   <link>http://raycoarana.com/</link>
   <description>My coding adventures and other random stuff</description>
   <language>en-uk</language>
   <managingEditor> Rayco Araña</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Concurrency with Promise Style. DroidCon 2015</title>
	  <link>//blog/2015/04/concurrency-with-promise-style-droidcon-2015/</link>
	  <author>Rayco Araña</author>
	  <pubDate>2015-04-25T17:25:02+02:00</pubDate>
	  <guid>//blog/2015/04/concurrency-with-promise-style-droidcon-2015/</guid>
	  <description><![CDATA[
	     <p>Os dejo por aquí la presentación de mi charla de hoy en la DroidCon Spain 2015 dónde hablamos del patrón Promise, como implementarlo con jDeferred y como podemos beneficiarnos de su uso.</p>

<p><a href="https://speakerd.s3.amazonaws.com/presentations/ef9ad55c34fe4a68b961eb0a214f34ce/Concurrency-with-Promise-Style.pdf"><strong>Descargar</strong></a></p>

<script async="" class="speakerdeck-embed" data-id="ef9ad55c34fe4a68b961eb0a214f34ce" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>


	  ]]></description>
	</item>

	<item>
	  <title>Baindo, un MVVM diferente para Android</title>
	  <link>//blog/2015/01/baindo-un-mvvm-diferente-para-android/</link>
	  <author>Rayco Araña</author>
	  <pubDate>2015-01-20T22:59:40+01:00</pubDate>
	  <guid>//blog/2015/01/baindo-un-mvvm-diferente-para-android/</guid>
	  <description><![CDATA[
	     <p>Hoy os vengo a presentar algo en lo que llevo un tiempo trabajando, <strong>Baindo</strong>, un framework para aplicar <strong>MVVM en aplicaciones Android</strong>, del que quiero mostraros un <em>Sneak Peek</em> del estado actual.
¿Por qué otro framework MVVM si existen miles? La respuesta a esta pregunta está en las ideas base que inspiran Baindo:</p>

<ul>
  <li>Evitar el uso de cualquier tipo de Reflection.</li>
  <li>Sintaxis cómoda en código Java. Nada de Custom Views o Custom Attributes en nuestros layouts.</li>
  <li>ViewModels sencillos y con ninguna dependencia con Android.</li>
  <li>Maximizar el rendimiento del hilo de UI. Comandos y eventos de modificación de las propiedades se ejecutan en Background.</li>
  <li>Actualización de UI desde cualquier hilo a través de las propiedades del ViewModel. Olvidate de tener que usar AsyncTask, Handlers o similares para hacer cambios en la UI.</li>
</ul>

<p>Pinta bien, ¿no? ;-). Pues además será OpenSource y estará disponible en GitHub muy pronto. Veamos que pinta tiene.</p>

<!--more-->

<h3 id="un-ejemplo-sencillo">Un ejemplo sencillo</h3>

<p>Vamos a hacer un ejemplo sencillo de como seria su uso. Hagamos un simple hola mundo con un Button y un TextView que al pulsar dicho botón, nos muestre el mensaje <em>“HelloWorld!”</em> en el TextView.</p>

<p>Lo primero es hacer el layout de la vista.</p>

<div class="language-xml highlighter-rouge"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span>
<span class="nt">&lt;LinearLayout</span> <span class="na">xmlns:android=</span><span class="s">"http://schemas.android.com/apk/res/android"</span>
    <span class="na">android:orientation=</span><span class="s">"vertical"</span>
    <span class="na">android:layout_width=</span><span class="s">"match_parent"</span>
    <span class="na">android:layout_height=</span><span class="s">"match_parent"</span><span class="nt">&gt;</span>

    <span class="nt">&lt;TextView</span>
        <span class="na">android:id=</span><span class="s">"@+id/message"</span>
        <span class="na">android:layout_width=</span><span class="s">"match_parent"</span>
        <span class="na">android:layout_height=</span><span class="s">"wrap_content"</span> <span class="nt">/&gt;</span>

    <span class="nt">&lt;Button</span>
        <span class="na">android:id=</span><span class="s">"@+id/button"</span>
        <span class="na">android:layout_width=</span><span class="s">"match_parent"</span>
        <span class="na">android:layout_height=</span><span class="s">"wrap_content"</span>
        <span class="na">android:text=</span><span class="s">"Tap me!"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/LinearLayout&gt;</span>
</code></pre>
</div>

<p>Ahora creamos el ViewModel para nuestro ejemplo, tenemos una acción a ejecutar, luego pondremos un comando y una propiedad de tipo CharSequence a la que asignar el valor <strong>“HelloWorld!”</strong>.
Creamos la propiedad como un atributo público de tipo <code class="highlighter-rouge">Property&lt;CharSequence&gt;</code>, que llamaremos <code class="highlighter-rouge">Message</code>, al cual le asignamos una instancia del mismo tipo.
A continuación el comando como un atributo público de tipo <code class="highlighter-rouge">Command</code>, que llamamos <code class="highlighter-rouge">SayHelloCommand</code>, creamos una clase anónima que le asignamos a dicho atributo y en él llamamos al método <code class="highlighter-rouge">setValue()</code> de la propiedad <code class="highlighter-rouge">Message</code>.</p>

<div class="language-java highlighter-rouge"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ViewModel</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">final</span> <span class="n">Property</span><span class="o">&lt;</span><span class="n">CharSequence</span><span class="o">&gt;</span> <span class="n">Message</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Property</span><span class="o">&lt;&gt;();</span>

    <span class="kd">public</span> <span class="kd">final</span> <span class="n">Command</span> <span class="n">SayHelloCommand</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Command</span><span class="o">()</span> <span class="o">{</span>
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">execute</span><span class="o">()</span> <span class="o">{</span>
            <span class="n">Message</span><span class="o">.</span><span class="na">setValue</span><span class="o">(</span><span class="s">"HelloWorld!"</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">};</span>
<span class="o">}</span>
</code></pre>
</div>

<p>Sencillo, limpio y fácil de probar.</p>

<p>A continuación creamos un <code class="highlighter-rouge">Activity</code> que vamos hacer que herede de <code class="highlighter-rouge">BaindoActivity</code>. <strong>Baindo ofrece una serie de Activities, Fragments y Renderers</strong> (utiliza la librería de <a href="https://github.com/pedrovgs/Renderers">Renderers</a> para introducir el binding en Adapters) a partir de las cuales crear nuestras vistas. También ofrece un sencillo mecanismo para crear o dar soporte a Baindo en nuestros propios Activities y Fragments base, con muy pocas líneas. Ya os contaré más acerca de como hacer esto.</p>

<p>En este <code class="highlighter-rouge">Activity</code>, una vez le hemos asignado el layout, llamaremos a un método <code class="highlighter-rouge">bindViews()</code> justo después del <code class="highlighter-rouge">setContentView()</code>.</p>

<div class="language-java highlighter-rouge"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ClickActivity</span> <span class="kd">extends</span> <span class="n">BaindoActivity</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">ViewModel</span> <span class="n">mViewModel</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ViewModel</span><span class="o">();</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
        <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_click</span><span class="o">);</span>

        <span class="n">bindViews</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre>
</div>

<p>Por último, vamos a implementar el método <em>bindViews()</em>, en el vamos a hacer el bind entre el <code class="highlighter-rouge">Button</code> del layout y el comando <code class="highlighter-rouge">SayHelloCommand</code>. Y luego entre el <code class="highlighter-rouge">TextView</code> y la propiedad <code class="highlighter-rouge">Message</code>. Cuando hacemos un bind a una propiedad debemos establecer la <em>dirección</em> del bind. Este puede ser unidireccional hacia el ViewModel (<code class="highlighter-rouge">writeOnly</code>), hacia la vista, (<code class="highlighter-rouge">readOnly</code>) o bidireccional (<code class="highlighter-rouge">readWrite</code>).</p>

<p>Como ya iremos viendo según avancemos sobre los diferentes bindings que permite Baindo, no todos permiten ambas direcciones, por ejemplo un control <code class="highlighter-rouge">ProgressBar</code> solo permite el modo readOnly. Un <code class="highlighter-rouge">SeekBar</code>, sin embargo, permite cualquiera de ellos.</p>

<p>En este caso vamos a ponerlo en modo readOnly, ya que solo queremos que la vista muestre lo que tiene el ViewModel sin modificarlo en ningún caso.</p>

<div class="language-java highlighter-rouge"><pre class="highlight"><code>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">bindViews</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">bind</span><span class="o">().</span><span class="na">text</span><span class="o">()</span>
              <span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">message</span><span class="o">)</span>
              <span class="o">.</span><span class="na">to</span><span class="o">(</span><span class="n">mViewModel</span><span class="o">.</span><span class="na">Message</span><span class="o">).</span><span class="na">readOnly</span><span class="o">();</span>
        <span class="n">bind</span><span class="o">().</span><span class="na">click</span><span class="o">()</span>
              <span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">button</span><span class="o">)</span>
              <span class="o">.</span><span class="na">to</span><span class="o">(</span><span class="n">mViewModel</span><span class="o">.</span><span class="na">SayHelloCommand</span><span class="o">);</span>
    <span class="o">}</span>
</code></pre>
</div>

<p>Y ya lo tenemos, si ejecutamos la aplicación (acordaos de registrar la actividad en el manifest), tenemos lo que esperamos, el mensaje se muestra en el <code class="highlighter-rouge">TextView</code> una vez pulsamos el botón.</p>

<p>El código que hemos escrito en el comando se ejecuta en un hilo separado, un hilo que llamaremos <strong>hilo del ViewModel</strong>, así pues tendremos en nuestra app <strong>un hilo de UI y tantos hilos como Activities/Fragments tengamos en pantalla</strong>. Estos hilos son avisados cuando se producen cambios en la UI y notifican cambios en el ViewModel al hilo de UI.</p>

<h3 id="puedo-hacer-cualquier-cosa-en-un-hilo-de-viewmodel">¿Puedo hacer cualquier cosa en un hilo de ViewModel?</h3>
<p>Pues si y no, depende de tu ViewModel y tu vista, hay que tener en cuenta que si bien no vas a bloquear nunca la UI, si que puedes producir el efecto de que al pulsar un botón no pasa nada hasta pasado un tiempo. <strong>Si el hilo del ViewModel está ocupado, no puede atender a ese nuevo evento de UI</strong>, los cuales serán atendidos una vez el hilo del ViewModel quede liberado. Lo ideal del hilo de ViewModel es hacer esos pequeños cálculos previos a pintar nuestros modelos. No es un proceso de negocio, sino un proceso de  preparación para ser mostrado en UI como manejo de cadenas, pequeñas operaciones, coordinar operaciones en background, etc.</p>

<p>Con este esquema <strong>conseguimos la mejor respuesta de la UI al usuario</strong>. Adiós parones, bajadas de framerate en animaciones, etc., gracias a Baindo podemos olvidarnos de todo esto. Estad atentos al blog, <strong>muy pronto publicaré la primera alpha</strong> para que podáis trastear con ella, hasta entonces, sed pacientes!!</p>

	  ]]></description>
	</item>

	<item>
	  <title>RoboRouter, mi primera librería OpenSource</title>
	  <link>//blog/2014/11/roborouter/</link>
	  <author>Rayco Araña</author>
	  <pubDate>2014-11-03T23:17:07+01:00</pubDate>
	  <guid>//blog/2014/11/roborouter/</guid>
	  <description><![CDATA[
	     <p>Hace tiempo que no escribo nada en el Blog, pero hoy tengo el orgullo de presentar mi primera librería <em>OpenSource</em>: RoboRouter. Es para Android y disponible a través de <strong>Maven/Gradle</strong>.
<!--more--></p>

<h3 id="qué-es-roborouter">¿Qué es RoboRouter?</h3>
<p>RoboRouter es un pequeña librería <em>-de apenas dos clases-</em> que permite mediante la activación/desactivación de componentes <strong>manejar el punto de arranque de nuestra aplicación</strong> cuando esta tiene una pantalla de inicio de sesión y/o un asistente de bienvenida o tutorial inicial. Cosas que es muestran escasamente una vez en la vida de la aplicación en el móvil de un usuario y que no debería <em>ensuciar</em> el código de la actividad principal con la que arrancamos la aplicación normalmente. RoboRouter permite gestionar este tipo de escenarios de una forma <strong>muy fácil y sin apenas escribir código</strong>.</p>

<p>Pasaos por <a href="https://github.com/raycoarana/roborouter">GitHub</a> y mirad como funciona, descargad el proyecto de ejemplo y jugad con él. Cualquier sugerencia será bienvenida.</p>

<div class="github-box repo" data-repo="raycoarana/roborouter">  <div class="github-box-title">    <h3><a class="owner" href="http://github.com/raycoarana">raycoarana</a>/<a class="repo" href="http://github.com/raycoarana/roborouter">roborouter</a></h3>    <div class="github-stats"><a class="watchers" href="http://github.com/raycoarana/roborouter/watchers">?</a><a class="forks" href="http://github.com/raycoarana/roborouter/network/members">?</a></div>  </div>  <div class="github-box-content"><p class="description"><span></span> &mdash; <a href="http://github.com/raycoarana/roborouter#readme">Read More</a></p><p class="link"></p></div>  <div class="github-box-download"><p class="updated">Latest commit to the <strong>master</strong> branch on <span></span></p><a class="download" href="http://github.com/raycoarana/roborouter/zipball/master">Download as zip</a></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>Full text search contra otras formas de búsqueda</title>
	  <link>//blog/2014/09/full-text-search-contra-formas-busqueda/</link>
	  <author>Rayco Araña</author>
	  <pubDate>2014-09-07T22:28:14+02:00</pubDate>
	  <guid>//blog/2014/09/full-text-search-contra-formas-busqueda/</guid>
	  <description><![CDATA[
	     <p>Algo muy común en cualquier aplicación Android es el añadir la posibilidad de realizar búsquedas sobre un ListView. Dado que para mostrar los datos sobre un ListView probablemente ya hemos realizado una consulta a la base de datos SQLite donde estos residen, podemos creer que lo mejor es filtrar los datos que ya tenemos cargados en memoria. De esta forma no pagamos de nuevo el precio del acceso a la base de datos que está en disco y es lenta; ni tampoco tenemos que volver a crear los objetos a partir del Cursor que esta nos devuelve. Pero, ¿hemos pensado bien el coste de buscar texto sobre los datos cargados en memoria? ¿Es esto mejor que un acceso a disco? ¿Escala?
<!--more--></p>

<h3 id="la-magnitud-del-problema">La magnitud del problema</h3>
<p>Al implementar el filtrado en memoria y optando por una solución sencilla y viable para su desarrollo, descartando el crear grandes estructuras de datos, es tan sencillo como implementar un pequeño bucle que recorra cada elemento y por cada uno realice la búsqueda del texto. Por cada elemento haremos uno o varios contains para buscar la cadena que quiere el usuario sobre el elemento. Esto nos lleva a un problema de O(n*m), dónde n es el número de elementos sobre los que buscar y m es el tamaño de la cadena de texto sobre la que buscar en cada elemento. Esto a priori ya nos da una señal de cómo escala esta solución. Sin embargo, siempre nos puede quedar la duda de, ¿es lo suficientemente buena como para evitar el acceso a la base de datos?</p>

<h3 id="full-text-search-en-sqlite">Full text search en SQLite</h3>
<p>Full text search es un termino que acuñan casi todos los motores de base de datos para designar a su implementación de la búsqueda de texto. Estos tipos de <em>índices</em> son muy potentes y son capaces de manejar gran cantidad de datos y realizar búsquedas muy diversas en muy poco tiempo. En el caso de SQLite, simplificando mucho, esto se lleva a cabo a través de varias tablas, algunas físicas y otras virtuales que se crean automáticamente para representar las estructuras de datos usadas, entre ellas un árbol B, podéis consultar más detalles técnicos en <a href="http://www.sqlite.org/fts3.html"><em>http://www.sqlite.org/fts3.html</em></a>.</p>

<h3 id="the-search-battle">The search battle</h3>
<p>Para comprobar qué método es mejor para realizar las búsquedas, vamos a enfrentarlos y ver qué es mejor, si buscar sobre datos ya cargados en memoria o volver a lanzar la búsqueda a la base de datos. Para ello he creado un proyecto, que tenéis disponible al final del artículo, donde realizar búsquedas sobre distintos conjuntos de datos con distintas palabras clave. Los conjuntos de datos provienen todos del mismo sitio, la lista de coches de Gran Turismo 6. En la comparativa tendremos por un lado la clase MemorySearch, que realiza las búsquedas basándose en el método <em>contains()</em> de esta forma:</p>

<div class="language-java highlighter-rouge"><pre class="highlight"><code>    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Car</span><span class="o">&gt;</span> <span class="nf">onSearch</span><span class="o">(</span><span class="n">String</span> <span class="n">term</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Car</span><span class="o">&gt;</span> <span class="n">results</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Car</span><span class="o">&gt;();</span>
        <span class="k">for</span><span class="o">(</span><span class="n">Car</span> <span class="n">car</span> <span class="o">:</span> <span class="n">mCars</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">contained</span><span class="o">(</span><span class="n">term</span><span class="o">.</span><span class="na">toLowerCase</span><span class="o">(),</span>
                           <span class="n">car</span><span class="o">.</span><span class="na">getCountry</span><span class="o">(),</span>
                           <span class="n">car</span><span class="o">.</span><span class="na">getBrand</span><span class="o">(),</span>
                           <span class="n">car</span><span class="o">.</span><span class="na">getName</span><span class="o">(),</span>
                           <span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">car</span><span class="o">.</span><span class="na">getYear</span><span class="o">())))</span> <span class="o">{</span>
                <span class="n">results</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">car</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">results</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">contained</span><span class="o">(</span><span class="n">String</span> <span class="n">term</span><span class="o">,</span> <span class="n">String</span><span class="o">...</span> <span class="n">texts</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">for</span><span class="o">(</span><span class="n">String</span> <span class="n">text</span> <span class="o">:</span> <span class="n">texts</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span><span class="o">(</span><span class="n">text</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">text</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">term</span><span class="o">))</span> <span class="o">{</span>
                <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    <span class="o">}</span>
</code></pre>
</div>

<p>Por otro lado tenemos la clase FTSSearch, que realiza la misma búsqueda contra la base de datos SQLite usando Full text search.</p>

<div class="language-java highlighter-rouge"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">FTS_QUERY_TEMPLATE</span> <span class="o">=</span> <span class="s">"SELECT * FROM %s WHERE _id IN (SELECT docid FROM %s_fts WHERE content MATCH ?)"</span><span class="o">;</span>

<span class="o">...</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Car</span><span class="o">&gt;</span> <span class="nf">onSearch</span><span class="o">(</span><span class="n">String</span> <span class="n">term</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Cursor</span> <span class="n">cursor</span> <span class="o">=</span> <span class="n">mDatabase</span><span class="o">.</span><span class="na">executeQuery</span><span class="o">(</span>
            <span class="n">mQuery</span><span class="o">,</span> 
            <span class="k">new</span> <span class="n">String</span><span class="o">[]{</span> <span class="n">term</span> <span class="o">+</span> <span class="s">"*"</span> <span class="o">}</span>
        <span class="o">);</span>
        <span class="k">return</span> <span class="n">Car</span><span class="o">.</span><span class="na">fromCursor</span><span class="o">(</span><span class="n">cursor</span><span class="o">);</span>
    <span class="o">}</span>
</code></pre>
</div>

<p>En ambos casos, el método <em>onSearch()</em> es sobre el que hacemos mediciones. Este método lo ejecutaremos 10 veces para cada conjunto de datos de forma que tengamos una medición algo más estable.</p>

<p>Los conjuntos de datos se distinguen por el número de elementos que contienen, tenemos siete distintos con 10, 100, 250, 500, 750, 1000 y 1200 elementos (el que este último sean 1200 en vez de 1250 no es más que porque GT6 no tiene más coches :-D).</p>

<p>Los resultados que obtenemos, ejecutando la aplicación sobre mi Xperia Z con Android 4.4.2 son los siguientes, si bien haciendo ejecuciones con otras versiones de Android los resultados cambian de magnitud pero, relativamente hablando, son similares entre ellos.</p>

<p><img src="/assets/images/search_methods_graph.png" alt="Gráfica comparativa Full text search" /> Gráfica comparando los resultados de la batalla</p>

<h3 id="un-claro-ganador">Un claro ganador</h3>
<p>Como podéis ver hay un claro ganador y este es la búsqueda con Full text search. A pesar de que haciendo esta búsqueda estamos consultando la base de datos, accediendo a disco y recreando los objetos en cada una de ellas, la velocidad de ejecución es claramente superior. Una solución que además escala muy bien, como podéis ver por la forma de gráfica, en contra de la solución de buscar sobre los datos en memoria.</p>

<p>Evidentemente puedes pensar que si tuviésemos una estructura de datos decente sobre la que buscar, por ejemplo creando ese árbol B, las cosas cambiarían, pero ello requeriría mucho más desarrollo, un mayor consumo de memoria de la aplicación y el tiempo de generación de esa estructura en memoria cada vez que arranque la aplicación o persistirla y aumentar aún más la cantidad de código requerido. Viendo el tiempo que tarda una búsqueda con FTS, no tiene sentido ninguno de estos planteamientos alternativos.</p>

<p>FTS no es gratis, evidentemente al crear una tabla de este tipo va a penalizar las escrituras y además incrementará el tamaño de la base de datos en disco, dos cosas que en el 99% de las aplicaciones no serán un gran problema. Lo normal en las aplicaciones móviles es escribir poco y leer muchas veces. Sobre el mayor tamaño en disco de la base de datos, tendrían que ser muchos los datos para ser un problema, unos pocos megas de más cuando los móviles manejan 4-8 GB de almacenamiento como mínimo por norma general no supondrá tampoco un problema.</p>

<p>Así que si vas a desarrollar una app, tienes datos persistidos en una base de datos SQLite, no reinventes la rueda y usa el soporte para Full text search. Si tus datos no se persisten y vienen de la nube, te puedes plantear crear una base de datos SQLite en memoria si no quieres repetir la búsqueda.</p>

<div class="github-box repo" data-repo="raycoarana/thesearchbattle">  <div class="github-box-title">    <h3><a class="owner" href="http://github.com/raycoarana">raycoarana</a>/<a class="repo" href="http://github.com/raycoarana/thesearchbattle">thesearchbattle</a></h3>    <div class="github-stats"><a class="watchers" href="http://github.com/raycoarana/thesearchbattle/watchers">?</a><a class="forks" href="http://github.com/raycoarana/thesearchbattle/network/members">?</a></div>  </div>  <div class="github-box-content"><p class="description"><span></span> &mdash; <a href="http://github.com/raycoarana/thesearchbattle#readme">Read More</a></p><p class="link"></p></div>  <div class="github-box-download"><p class="updated">Latest commit to the <strong>master</strong> branch on <span></span></p><a class="download" href="http://github.com/raycoarana/thesearchbattle/zipball/master">Download as zip</a></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>Patrón Promise con jdeferred</title>
	  <link>//blog/2014/08/patron-promise-con-jdeferred/</link>
	  <author>Rayco Araña</author>
	  <pubDate>2014-08-08T00:02:48+02:00</pubDate>
	  <guid>//blog/2014/08/patron-promise-con-jdeferred/</guid>
	  <description><![CDATA[
	     <p>El patrón Promise es un patrón que trata de simplificar la estructura de nuestro código cuando trabajamos con operaciones asíncronas, algo que está a la orden del día en cualquier aplicación con interfaz gráfica, pero también importante en servicios que tienen distintas dependencias para realizar su trabajo y este puede realizarse en paralelo.</p>

<p>En primer lugar vamos a plantear el problema que trata de resolverse y cómo lo simplificamos con este patrón y en concreto con la librería <strong>jdeferred</strong>. Luego veremos el caso de particular de Android y el soporte específico que nos ofrece <strong>jdeferred</strong> que nos simplifican aún más el trabajo.</p>

<!--more-->

<h3 id="trabajo-en-paralelo-y-sincronización-de-hilos">Trabajo en paralelo y sincronización de hilos</h3>
<p>En cualquier aplicación que desarrollemos, siempre debemos trabajar al menos con dos hilos de ejecución. Un primer hilo encargado de pintar la interfaz gráfica y procesar la entrada del usuario; y un segundo hilo encargado de realizar las operaciones con recursos lentos como el acceso a disco, red, etc. Con esto conseguimos tener una interfaz gráfica que siempre responde al usuario y no parece que está colgada.</p>

<p>Por ejemplo, imaginemos que queremos en nuestra aplicación realizar tareas de procesamiento a razón de peticiones del usuario. Según el trabajo se vaya completando queremos notificar el progreso al usuario. Ahora mismo estamos en un mundo donde no hay PC/Smartphone/Tablet que no tenga varias CPUs, así que podemos lanzar varias cosas a ejecutarse al mismo tiempo, pero no podemos crear infinitos hilos -bueno en teoría sí, ya que el Sistema operativo compartirá el tiempo de CPU entre todos los hilos y si la memoria aguanta, podríamos tener muchos, pero no es lo más óptimo-. Así pues para empezar, nos creamos un <strong>pool de hilos</strong>.</p>

<div class="language-java highlighter-rouge"><pre class="highlight"><code><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">NUMBER_OF_CPUS</span> <span class="o">=</span> <span class="n">Runtime</span><span class="o">.</span><span class="na">getRuntime</span><span class="o">().</span><span class="na">availableProcessors</span><span class="o">();</span>

<span class="kd">private</span> <span class="n">ExecutorService</span> <span class="n">mExecutorService</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
        <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_sample</span><span class="o">);</span>

        <span class="n">mExecutorService</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newFixedThreadPool</span><span class="o">(</span><span class="n">NUMBER_OF_CPUS</span><span class="o">);</span>
    <span class="o">}</span>
</code></pre>
</div>

<p>En este código estamos utilizando el número de CPUs disponibles, <strong>no quiere decir que esto sea lo más óptimo</strong>. De hecho, dependiendo del tipo de trabajo que vayamos a hacer, por ejemplo, una petición de lectura de disco, <strong>la CPU quedará un tanto ociosa mientras el disco responde y otro hilo podría adelantar trabajo</strong>. Luego muy probablemente un número un tanto mayor podría llegar a obtener mejores resultados, todo depende del tipo de trabajo a realizar. Para ello lo mejor es <strong>no tratar de optimizar desde el minuto 0</strong>, sino una vez tenemos resuelto el problema, probar otros valores para ver con cuál se obtienen mejores resultados.</p>

<p>Bien una vez tenemos nuestro pool de hilos, podemos agregar trabajo a realizar.</p>

<div class="language-java highlighter-rouge"><pre class="highlight"><code><span class="kd">private</span> <span class="kt">void</span> <span class="nf">doWorkInBackground</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">Runnable</span> <span class="n">work</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">100</span><span class="o">;</span> <span class="n">i</span> <span class="o">+=</span> <span class="mi">20</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
                    <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">"Done "</span> <span class="o">+</span> <span class="n">i</span> <span class="o">+</span> <span class="s">"% of work on thread "</span> <span class="o">+</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getId</span><span class="o">());</span>
                <span class="o">}</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">"Error doing background work"</span><span class="o">,</span> <span class="n">ex</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">};</span>
    <span class="n">mExecutorService</span><span class="o">.</span><span class="na">submit</span><span class="o">(</span><span class="n">work</span><span class="o">);</span>
<span class="o">}</span>
</code></pre>
</div>

<p>Como veis, no es más que crear un <code class="highlighter-rouge">Runnable</code> con el trabajo a realizar y llamar al método <code class="highlighter-rouge">submit()</code> de nuestro <code class="highlighter-rouge">ExecutorService</code> para que programe y ejecute el trabajo en un hilo en segundo plano.</p>

<p>El esquema anterior es muy simple, pero normalmente una aplicación es algo más compleja y lo primero que podemos agregar de complejidad es hacer un tratamiento al resultado de la ejecución de lo anterior. Por ejemplo, hacemos una librería que lee una imagen de disco de forma asíncrona con el anterior esquema, ¿dónde ponemos el código para hacer algo con esa imagen una vez se ha cargado? Lo primero que podemos pensar es llamar a esa tarea de procesar la imagen como última línea de código dentro del Runnable. Eso funciona, pero <strong>estamos acoplando dos funcionalidades distintas y afectando a la reusabilidad de nuestro código</strong>.</p>

<h3 id="patrón-promise-al-rescate">Patrón Promise al rescate</h3>
<p>La esencia del patrón Promise es precisamente esa, cuando lanzamos un trabajo asíncrono, se nos devuelve una promesa de que recibiremos en un momento futuro el resultado del mismo. Con esta promesa luego <strong>podemos encolar trabajo para que este se ejecute cuando el anterior ha finalizado</strong>.</p>

<p>Veamos cómo podemos aplicarlo a nuestro ejemplo. Lo primero será crear un <code class="highlighter-rouge">DeferredObject</code>, el cual controlará el estado de la promesa y sobre el que podemos actuar para <strong>notificar progreso, errores o resultado del trabajo</strong>. Los tres métodos esenciales son:</p>

<ul>
  <li><strong>notify()</strong> para notificar progreso en la ejecución de la tarea.</li>
  <li><strong>resolve()</strong> para dar la tarea por finalizada y enviar el resultado.</li>
  <li><strong>reject()</strong> para notificar errores en la operación.</li>
</ul>

<p>Por último, una vez hemos lanzado a ejecutar el trabajo, devolvemos la promesa.</p>

<div class="language-java highlighter-rouge"><pre class="highlight"><code><span class="kd">private</span> <span class="n">Promise</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Throwable</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="nf">doWorkInBackground</span><span class="o">()</span> <span class="o">{</span>
    <span class="kd">final</span> <span class="n">DeferredObject</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Throwable</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">deferredObject</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DeferredObject</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Throwable</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;();</span>

    <span class="n">Runnable</span> <span class="n">work</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">100</span><span class="o">;</span> <span class="n">i</span> <span class="o">+=</span> <span class="mi">20</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
                    <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">"Done "</span> <span class="o">+</span> <span class="n">i</span> <span class="o">+</span> <span class="s">"% of work on thread "</span> <span class="o">+</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getId</span><span class="o">());</span>
                    <span class="n">deferredObject</span><span class="o">.</span><span class="na">notify</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
                <span class="o">}</span>

                <span class="n">deferredObject</span><span class="o">.</span><span class="na">resolve</span><span class="o">(</span><span class="s">"Finish!"</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">deferredObject</span><span class="o">.</span><span class="na">reject</span><span class="o">(</span><span class="n">ex</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">};</span>
    <span class="n">mExecutorService</span><span class="o">.</span><span class="na">submit</span><span class="o">(</span><span class="n">work</span><span class="o">);</span>

    <span class="k">return</span> <span class="n">deferredObject</span><span class="o">.</span><span class="na">promise</span><span class="o">();</span>
<span class="o">}</span>
</code></pre>
</div>

<p>Y ya está, ahora si queremos usar este método y realizar acciones con cada posible caso solo nos queda ir agregando los <em>callbacks</em> necesarios. Estos son:</p>

<ul>
  <li><strong>then()</strong>. Qué hacer cuando el trabajo ha finalizado, puedes recibir hasta 3 parámetros, qué hacer después en caso de tener resultado, en caso de fallo y con cada progreso.</li>
  <li><strong>progress()</strong>. Qué hacer con cada notificación de progreso.</li>
  <li><strong>done()</strong>. Qué hacer solo cuando se finaliza correctamente.</li>
  <li><strong>fail()</strong>. Qué hacer cuando se produce un error.</li>
  <li><strong>always()</strong>. Qué hacer en cualquier caso, ya sea error o no.</li>
</ul>

<p>Todas estas llamadas se pueden ir encolando como comentábamos anteriormente. En principio todas ellas se ejecutan en el mismo hilo desde el que se produce la notificación, en este caso que estamos mostrando, todo ello se ejecuta desde el hilo que ejecuta el Runnable. Para comprobarlo, vamos a añadir este código a nuestro ejemplo.</p>

<div class="language-java highlighter-rouge"><pre class="highlight"><code><span class="nd">@Override</span>
<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
    <span class="o">...</span>

    <span class="k">this</span><span class="o">.</span><span class="na">doWorkInBackground</span><span class="o">()</span>
            <span class="o">.</span><span class="na">then</span><span class="o">(</span><span class="k">new</span> <span class="n">DoneCallback</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;()</span> <span class="o">{</span>
                <span class="nd">@Override</span>
                <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onDone</span><span class="o">(</span><span class="n">String</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">"then() on thread "</span> <span class="o">+</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getId</span><span class="o">());</span>
                <span class="o">}</span>
            <span class="o">}).</span><span class="na">progress</span><span class="o">(</span><span class="k">new</span> <span class="n">ProgressCallback</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;()</span> <span class="o">{</span>
                <span class="nd">@Override</span>
                <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onProgress</span><span class="o">(</span><span class="n">Integer</span> <span class="n">progress</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">"progress() on thread "</span> <span class="o">+</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getId</span><span class="o">());</span>
                <span class="o">}</span>
            <span class="o">}).</span><span class="na">done</span><span class="o">(</span><span class="k">new</span> <span class="n">DoneCallback</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;()</span> <span class="o">{</span>
                <span class="nd">@Override</span>
                <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onDone</span><span class="o">(</span><span class="n">String</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">"done() on thread "</span> <span class="o">+</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getId</span><span class="o">());</span>
                <span class="o">}</span>
            <span class="o">}).</span><span class="na">fail</span><span class="o">(</span><span class="k">new</span> <span class="n">FailCallback</span><span class="o">&lt;</span><span class="n">Throwable</span><span class="o">&gt;()</span> <span class="o">{</span>
                <span class="nd">@Override</span>
                <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onFail</span><span class="o">(</span><span class="n">Throwable</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">"fail() on thread "</span> <span class="o">+</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getId</span><span class="o">());</span>
                <span class="o">}</span>
            <span class="o">}).</span><span class="na">always</span><span class="o">(</span><span class="k">new</span> <span class="n">AlwaysCallback</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Throwable</span><span class="o">&gt;()</span> <span class="o">{</span>
                <span class="nd">@Override</span>
                <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onAlways</span><span class="o">(</span><span class="n">Promise</span><span class="o">.</span><span class="na">State</span> <span class="n">state</span><span class="o">,</span> <span class="n">String</span> <span class="n">resolved</span><span class="o">,</span> <span class="n">Throwable</span> <span class="n">rejected</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">"always() on thread "</span> <span class="o">+</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getId</span><span class="o">());</span>
                <span class="o">}</span>
            <span class="o">});</span>
<span class="o">}</span>
</code></pre>
</div>

<p>Del resultado de la ejecución de este código, tendremos la siguiente salida por consola:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>I/JDEFERRED_DEMO﹕ Done 0% of work on thread 351
I/JDEFERRED_DEMO﹕ progress() on thread 351
I/JDEFERRED_DEMO﹕ Done 20% of work on thread 351
I/JDEFERRED_DEMO﹕ progress() on thread 351
I/JDEFERRED_DEMO﹕ Done 40% of work on thread 351
I/JDEFERRED_DEMO﹕ progress() on thread 351
I/JDEFERRED_DEMO﹕ Done 60% of work on thread 351
I/JDEFERRED_DEMO﹕ progress() on thread 351
I/JDEFERRED_DEMO﹕ Done 80% of work on thread 351
I/JDEFERRED_DEMO﹕ progress() on thread 351
I/JDEFERRED_DEMO﹕ Done 100% of work on thread 351
I/JDEFERRED_DEMO﹕ progress() on thread 351
I/JDEFERRED_DEMO﹕ then() on thread 351
I/JDEFERRED_DEMO﹕ done() on thread 351
I/JDEFERRED_DEMO﹕ always() on thread 351
</code></pre>
</div>

<h3 id="de-la-promesa-a-la-interfaz-de-usuario">De la promesa a la interfaz de usuario</h3>
<p>Ya tenemos lo que queríamos, una forma de generar <strong>APIs en nuestras aplicaciones que ejecutan trabajo de forma asíncrona</strong> y que de manera muy fácil podemos encolar a otras tareas a realizar. Pero, ¿cómo podemos ahora interactuar con la UI? Como hemos visto, ahora mismo todo se está ejecutando en un hilo en segundo plano. ¿Cómo podemos cambiar el código anterior para hacer que alguna de esas llamadas sean en el hilo de la UI y así poder realizar cambios en la misma?</p>

<p>Lo primero que necesitamos es utilizar la clase <code class="highlighter-rouge">AndroidDeferredManager</code> para gestionar los hilos, en vez de utilizar directamente el <code class="highlighter-rouge">ExecutorService</code>. Vamos a crear uno en el método onCreate.</p>

<div class="language-java highlighter-rouge"><pre class="highlight"><code><span class="o">...</span>
    <span class="kd">private</span> <span class="n">AndroidDeferredManager</span> <span class="n">mDeferredManager</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
        <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_sample</span><span class="o">);</span>

        <span class="n">mDeferredManager</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AndroidDeferredManager</span><span class="o">(</span><span class="n">Executors</span><span class="o">.</span><span class="na">newFixedThreadPool</span><span class="o">(</span><span class="n">NUMBER_OF_CPUS</span><span class="o">));</span>

<span class="o">...</span>
</code></pre>
</div>

<p>Luego necesitamos cambiar en el método <code class="highlighter-rouge">doWorkInBackground()</code>, para en vez de utilizar el <code class="highlighter-rouge">ExecutorService</code>, utilizar el <code class="highlighter-rouge">DeferredManager</code> que hemos creado anteriormente. Por último, el <code class="highlighter-rouge">Promise</code> que generamos, debemos también hacerlo pasar por el <code class="highlighter-rouge">DeferredManager</code>, para que sea gestionado por él.</p>

<div class="language-java highlighter-rouge"><pre class="highlight"><code>    <span class="kd">private</span> <span class="n">Promise</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Throwable</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="nf">doWorkInBackground</span><span class="o">()</span> <span class="o">{</span>
        <span class="o">...</span>

        <span class="n">mDeferredManager</span><span class="o">.</span><span class="na">when</span><span class="o">(</span><span class="n">work</span><span class="o">);</span>

        <span class="k">return</span> <span class="n">mDeferredManager</span><span class="o">.</span><span class="na">when</span><span class="o">(</span><span class="n">deferredObject</span><span class="o">);</span>
    <span class="o">}</span>
</code></pre>
</div>

<p>Con estos dos cambios, a priori si volvemos a ejecutar la aplicación veremos que ahora todos los callbacks se ejecutan en el hilo de la UI. Este es el comportamiento por defecto del <code class="highlighter-rouge">AndroidDeferredManager</code>, entiende que todo lo que se ejecuta a partir de la promesa será actualizar la interfaz gráfica. 
¿Y si queremos seguir en background? Pues lo que tendremos que cambiar es la interfaz que usamos para crear las clases anónimas y utilizar las que comienzan por <strong>Android</strong>. Veremos que ahora la interfaz nos obliga a implementar un segundo método <code class="highlighter-rouge">getExecutionScope()</code> con el qué podemos indicar en que hilo se debe ejecutar nuestro <em>callback</em>, pudiendo indicar si es UI o BACKGROUND. Vamos a probarlo, cambiamos el <em>callback</em> de <code class="highlighter-rouge">always()</code> y hacemos que la clase anónima ahora se cree a partir de la interfaz <code class="highlighter-rouge">AndroidAlwaysCallback</code> e implementamos el método <code class="highlighter-rouge">getExecutionScope()</code> devolviendo <strong>BACKGROUND</strong>.</p>

<div class="language-java highlighter-rouge"><pre class="highlight"><code><span class="o">...</span>
<span class="o">}).</span><span class="na">always</span><span class="o">(</span><span class="k">new</span> <span class="n">AndroidAlwaysCallback</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Throwable</span><span class="o">&gt;()</span> <span class="o">{</span>
	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">onAlways</span><span class="o">(</span><span class="n">Promise</span><span class="o">.</span><span class="na">State</span> <span class="n">state</span><span class="o">,</span> <span class="n">String</span> <span class="n">resolved</span><span class="o">,</span> <span class="n">Throwable</span> <span class="n">rejected</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">"always() on thread "</span> <span class="o">+</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getId</span><span class="o">());</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="n">AndroidExecutionScope</span> <span class="nf">getExecutionScope</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">AndroidExecutionScope</span><span class="o">.</span><span class="na">BACKGROUND</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">});</span>
<span class="o">...</span>
</code></pre>
</div>

<p>Y volvemos a ejecutar nuestro código.</p>

<div class="highlighter-rouge"><pre class="highlight"><code>...
I/JDEFERRED_DEMO﹕ Done 0% of work on thread 414
I/JDEFERRED_DEMO﹕ progress() on thread 1
I/JDEFERRED_DEMO﹕ Done 20% of work on thread 414
I/JDEFERRED_DEMO﹕ progress() on thread 1
I/JDEFERRED_DEMO﹕ Done 40% of work on thread 414
I/JDEFERRED_DEMO﹕ progress() on thread 1
I/JDEFERRED_DEMO﹕ Done 60% of work on thread 414
I/JDEFERRED_DEMO﹕ progress() on thread 1
I/JDEFERRED_DEMO﹕ Done 80% of work on thread 414
I/JDEFERRED_DEMO﹕ progress() on thread 1
I/JDEFERRED_DEMO﹕ Done 100% of work on thread 414
I/JDEFERRED_DEMO﹕ always() on thread 414
I/JDEFERRED_DEMO﹕ progress() on thread 1
I/JDEFERRED_DEMO﹕ then() on thread 1
I/JDEFERRED_DEMO﹕ done() on thread 1
...
</code></pre>
</div>

<p>El resultado es que ahora el <em>always</em> se ha ejecutado en el hilo de background. El resto sigue en el hilo de la interfaz gráfica. Y con esto vemos que <strong>se ha adelantado la ejecución en este caso y a pesar del orden con el que hemos ido encadenando los callback, su ejecución es en un orden distinto debido al hilo en el que debe ejecutarse</strong>.</p>

<p>Como podéis imaginar podemos hacer muchos juegos con esta librería, pero lo dejamos para un siguiente artículo donde veremos cómo podemos hacer <strong>transformaciones de datos a base de filtros y pipes</strong> y cómo podemos además <strong>ejecutar trabajo en paralelo y realizar una acción final cuando todos estos trabajos en paralelo han terminado</strong> de manera muy fácil.</p>

<h3 id="código-más-limpio-y-fácil-de-leer">Código más limpio y fácil de leer</h3>
<p>La principal consecuencia de utilizar este patrón en nuestro código asíncrono es que nuestras APIs cumplen una máxima en el desarrollo de código limpio: <strong>los métodos no tienen parámetros de salida, solo un valor de retorno</strong>. En el caso asíncrono, es muy típico ver cómo hay que pasar un <em>callback</em> a un método para que cuando este acabe, nos devuelva por ahí el resultado. Con esta forma de trabajo, el método devuelve la promesa, con la que podremos obtener el valor más adelante, dejando un código más fácil de leer ya que es casi lineal y no obliga al desarrollador a estar dando saltos entre el código para seguir el flujo.</p>

<h3 id="cómo-la-obtengo">¿Cómo la obtengo?</h3>
<p>Pues desde su sitio web en <em><a href="http://jdeferred.org/">http://jdeferred.org/</a></em> o también a través de Gradle agregando:</p>

<div class="language-groovy highlighter-rouge"><pre class="highlight"><code><span class="n">compile</span> <span class="s1">'org.jdeferred:jdeferred-android:1.2.3'</span>
</code></pre>
</div>

<p>También os dejo en este repo el código de ejemplo.</p>

<div class="github-box repo" data-repo="raycoarana/jdeferred-demo">  <div class="github-box-title">    <h3><a class="owner" href="http://github.com/raycoarana">raycoarana</a>/<a class="repo" href="http://github.com/raycoarana/jdeferred-demo">jdeferred-demo</a></h3>    <div class="github-stats"><a class="watchers" href="http://github.com/raycoarana/jdeferred-demo/watchers">?</a><a class="forks" href="http://github.com/raycoarana/jdeferred-demo/network/members">?</a></div>  </div>  <div class="github-box-content"><p class="description"><span></span> &mdash; <a href="http://github.com/raycoarana/jdeferred-demo#readme">Read More</a></p><p class="link"></p></div>  <div class="github-box-download"><p class="updated">Latest commit to the <strong>master</strong> branch on <span></span></p><a class="download" href="http://github.com/raycoarana/jdeferred-demo/zipball/master">Download as zip</a></div></div>

	  ]]></description>
	</item>


</channel>
</rss>
