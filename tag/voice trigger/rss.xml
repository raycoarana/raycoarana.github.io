<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>raycoarana.com</title>
   
   <link>http://raycoarana.com/</link>
   <description>My coding adventures and other random stuff</description>
   <language>en-uk</language>
   <managingEditor> Rayco Araña</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Voice triggers. Primeros pasos con Google Glass (III)</title>
	  <link>//blog/2014/03/primeros-pasos-con-google-glass-iii/</link>
	  <author>Rayco Araña</author>
	  <pubDate>2014-03-28T18:47:02+01:00</pubDate>
	  <guid>//blog/2014/03/primeros-pasos-con-google-glass-iii/</guid>
	  <description><![CDATA[
	     <p>En el anterior artículo sobre los primeros pasos con Google Glass empezamos a ver el concepto de <strong>Voice trigger</strong>, los comandos de voz que permiten lanzar nuestras aplicaciones. Vamos a hablar un poco más cerca de ellas y qué cosas podemos hacer a día de hoy con la API.</p>

<!--more-->

<h3 id="voice-triggers-con-prompt">Voice triggers con prompt</h3>

<p>Una de las primeras cosas que podemos hacer con un Voice trigger es hacerle una pregunta al usuario. Es decir, el usuario dice <strong><em>Ok glass, google</em></strong>, entonces el sistema antes de abrir la aplicación de Google, abre una interfaz en la que muestra una pregunta y espera a que el usuario responda a ella. Luego una vez el usuario responde a la pregunta, lanza la aplicación proporcionando como parámetro el texto capturado.</p>

<p><img src="/assets/images/1.prompt.png" alt="Prompt de la aplicación de Google" /> Prompt de la aplicación de Google</p>

<p>Para asociar un prompt a nuestro voice trigger es tan sencillo como añadir una etiqueta <strong><em>input</em></strong> con un atributo <strong><em>prompt</em></strong> dentro de la etiqueta <strong><em>trigger</em></strong> de la siguiente forma:</p>

<div class="language-xml highlighter-rouge"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span>
<span class="nt">&lt;trigger</span> <span class="na">keyword=</span><span class="s">"@string/glass_voice_trigger"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;input</span> <span class="na">prompt=</span><span class="s">"@string/glass_voice_prompt"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/trigger&gt;</span>
</code></pre>
</div>

<p>Así de sencillo, con esto cuando el usuario lance nuestra aplicación, el sistema mostrará esa interfaz y capturará lo dicho por el usuario. Pero, ¿cómo recibimos esa información en nuestra aplicación? Pues como no podía ser de otra forma, a través del <strong>Intent</strong>. Para obtenerlo, debemos usar la constante <strong>RecognizerIntent.EXTRA_RESULTS</strong>, con la que obtendremos una lista de String con cada una de las palabras capturadas.</p>

<div class="language-java highlighter-rouge"><pre class="highlight"><code><span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">voiceResults</span> <span class="o">=</span> <span class="n">getIntent</span><span class="o">().</span><span class="na">getExtras</span><span class="o">()</span>
        <span class="o">.</span><span class="na">getStringArrayList</span><span class="o">(</span><span class="n">RecognizerIntent</span><span class="o">.</span><span class="na">EXTRA_RESULTS</span><span class="o">);</span>
</code></pre>
</div>

<h3 id="creando-un-voice-trigger-con-prompt">Creando un Voice trigger con prompt</h3>

<p>Vamos a poner en práctica lo anterior, creamos una nueva actividad en nuestro proyecto (o creamos un proyecto nuevo como <a href="/blog/2014/03/primeros-pasos-con-google-glass-ii/">ya vimos</a>) con su layout, donde vamos a mostrar el texto que hemos capturado del usuario.</p>

<p>Creamos un layout con nombre <strong>activity_askmesomething.xml</strong>, cuyo contenido será el siguiente.</p>

<div class="language-xml highlighter-rouge"><pre class="highlight"><code><span class="nt">&lt;LinearLayout</span> <span class="na">xmlns:android=</span><span class="s">"http://schemas.android.com/apk/res/android"</span>
    <span class="na">android:orientation=</span><span class="s">"vertical"</span>
    <span class="na">android:layout_width=</span><span class="s">"match_parent"</span>
    <span class="na">android:layout_height=</span><span class="s">"match_parent"</span>
    <span class="na">android:gravity=</span><span class="s">"center"</span><span class="nt">&gt;</span>

    <span class="nt">&lt;TextView</span>
        <span class="na">android:layout_width=</span><span class="s">"match_parent"</span>
        <span class="na">android:layout_height=</span><span class="s">"wrap_content"</span>
        <span class="na">android:gravity=</span><span class="s">"center"</span>
        <span class="na">android:textSize=</span><span class="s">"18sp"</span>
        <span class="na">android:text=</span><span class="s">"I ask you something and you respond"</span><span class="nt">/&gt;</span>

    <span class="nt">&lt;TextView</span>
        <span class="na">android:id=</span><span class="s">"@+id/captured_input"</span>
        <span class="na">android:layout_width=</span><span class="s">"match_parent"</span>
        <span class="na">android:layout_height=</span><span class="s">"wrap_content"</span>
        <span class="na">android:gravity=</span><span class="s">"center"</span><span class="nt">/&gt;</span>

<span class="nt">&lt;/LinearLayout&gt;</span>
</code></pre>
</div>

<p>Ahora creamos la actividad, enlazando con este layout.</p>

<div class="language-java highlighter-rouge"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AskMeSomethingActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
        <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_askmesomething</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre>
</div>

<p>Ahora vamos a obtener una referencia al <strong>TextView</strong> donde vamos a mostrar el texto capturado, recomponemos el texto capturado con un <strong>StringBuilder</strong> y lo asignamos al <strong>TextView</strong>. Quedaría algo así:</p>

<div class="language-java highlighter-rouge"><pre class="highlight"><code><span class="o">...</span>
        <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">voiceResults</span> <span class="o">=</span> <span class="n">getIntent</span><span class="o">().</span><span class="na">getExtras</span><span class="o">()</span>
                <span class="o">.</span><span class="na">getStringArrayList</span><span class="o">(</span><span class="n">RecognizerIntent</span><span class="o">.</span><span class="na">EXTRA_RESULTS</span><span class="o">);</span>

        <span class="n">StringBuilder</span> <span class="n">inputBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>
        <span class="k">for</span><span class="o">(</span><span class="n">String</span> <span class="n">voiceToken</span> <span class="o">:</span> <span class="n">voiceResults</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">inputBuilder</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">voiceToken</span><span class="o">);</span>
            <span class="n">inputBuilder</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">" "</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="n">TextView</span> <span class="n">capturedInputText</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextView</span><span class="o">)</span><span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">captured_input</span><span class="o">);</span>
        <span class="n">capturedInputText</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">inputBuilder</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
<span class="o">...</span>
</code></pre>
</div>

<p>Ya por último nos queda crear el Voice trigger y añadir la nueva actividad al <strong>AndroidManifest.xml</strong>. Lo primero el Voice trigger, añadimos un nuevo fichero xml que llamamos <strong><em>askmesomething_trigger.xml</em></strong> con el siguiente contenido, nada que ya no hayamos visto antes.</p>

<div class="language-xml highlighter-rouge"><pre class="highlight"><code><span class="nt">&lt;trigger</span> <span class="na">keyword=</span><span class="s">"@string/trigger_ask_me_something"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;input</span> <span class="na">prompt=</span><span class="s">"@string/prompt_ask_me_something"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/trigger&gt;</span>
</code></pre>
</div>

<p>Modificamos el fichero <strong><em>strings.xml</em></strong> para agregar las nuevas cadenas.</p>

<div class="language-xml highlighter-rouge"><pre class="highlight"><code><span class="nt">&lt;string</span> <span class="na">name=</span><span class="s">"trigger_ask_me_something"</span><span class="nt">&gt;</span>ask me something<span class="nt">&lt;/string&gt;</span>
<span class="nt">&lt;string</span> <span class="na">name=</span><span class="s">"prompt_ask_me_something"</span><span class="nt">&gt;</span>What\'s your favourite color?<span class="nt">&lt;/string&gt;</span>
</code></pre>
</div>

<p>Y por último agregamos la actividad al <strong><em>AndroidManifest.xml</em></strong>.</p>

<div class="language-xml highlighter-rouge"><pre class="highlight"><code>...
        <span class="nt">&lt;activity</span>
            <span class="na">android:name=</span><span class="s">".AskMeSomethingActivity"</span>
            <span class="na">android:label=</span><span class="s">"@string/app_name"</span> <span class="nt">&gt;</span>
            <span class="nt">&lt;intent-filter&gt;</span>
                <span class="nt">&lt;action</span>
                    <span class="na">android:name=</span><span class="s">"com.google.android.glass.action.VOICE_TRIGGER"</span> <span class="nt">/&gt;</span>
            <span class="nt">&lt;/intent-filter&gt;</span>

            <span class="nt">&lt;meta-data</span> <span class="na">android:name=</span><span class="s">"com.google.android.glass.VoiceTrigger"</span>
                <span class="na">android:resource=</span><span class="s">"@xml/askmesomething_trigger"</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;/activity&gt;</span>
...
</code></pre>
</div>

<p>Y ya tenemos todo listo, ahora solo nos falta lanzar la aplicación, decir <strong><em>Ok glass, ask me something</em></strong> y veremos la siguiente pantalla:</p>

<p><img src="/assets/images/2.our_prompt.png" alt="Prompt de nuestra aplicación" /> Prompt de nuestra aplicación</p>

<p>Al responder a la pregunta, se lanzará nuestra aplicación, mostrando por pantalla lo capturado:</p>

<p><img src="/assets/images/3.horse_is_black.png" alt="Pantalla con el resultado de la captura" /> Pantalla con el resultado de la captura</p>

<h3 id="restricciones">Restricciones</h3>

<p>Una última cosa que nos queda por comentar de los Voice triggers es la posibilidad de <strong>deshabilitarlos en función del estado del sistema</strong>, es decir, si alguna de las características del dispositivo no está disponible por la razón que fuera, el sistema deshabilita aquellos comandos de voz que lo requieran. Actualmente existen tres:</p>

<ul>
  <li>camera</li>
  <li>network</li>
  <li>microphone</li>
</ul>

<p>Por ejemplo, si nuestra aplicación requiere de conexión a internet, podemos limitar su uso con el siguiente código, donde podemos ver que se ha añadido la etiqueta <strong>constraints</strong> con el atributo <strong>network</strong> a <strong>true</strong>.</p>

<div class="language-xml highlighter-rouge"><pre class="highlight"><code><span class="nt">&lt;trigger</span> <span class="na">keyword=</span><span class="s">"@string/trigger_ask_me_something"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;constraints</span> <span class="na">network=</span><span class="s">"true"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/trigger&gt;</span>
</code></pre>
</div>

<p>Y esto es todo, el código de este artículo lo tenéis en el repositorio de esta serie de artículos, bajo la carpeta <strong>2.VoiceTriggers</strong>.</p>

<p>[github repo=”raycoarana/google_glass_first_steps”]</p>

<h3 id="continuará">Continuará…</h3>

<p>En el próximo artículo vamos a empezar a trabajar con la <strong>Card API</strong> para crear una interfaz con la que podamos navegar e interactuar. Veremos cómo utilizar las clases <em>Card</em>, <em>CardScrollView</em> y <em>CardScrollAdapter</em> para conseguir una interfaz similar a la que podemos ver en las aplicaciones Google Glass, sin ir más lejos, el propio <strong>Timeline</strong> usa esta dinámica.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Primeros pasos con Google Glass (II)</title>
	  <link>//blog/2014/03/primeros-pasos-con-google-glass-ii/</link>
	  <author>Rayco Araña</author>
	  <pubDate>2014-03-26T08:42:01+01:00</pubDate>
	  <guid>//blog/2014/03/primeros-pasos-con-google-glass-ii/</guid>
	  <description><![CDATA[
	     <p>Siguiendo la serie de artículos de primeros pasos Google Glass, toca empezar a ponernos manos a la obra con nuestra primera aplicación. En el último artículo sobre Google Glass, dimos un vistazo general de sus características técnicas y de uso, que nos sirve para tener idea de que se puede y que no se puede hacer con ellas. Si bien hay que tener en cuenta que estamos ante un producto que está aún en una fase temprana de desarrollo y que muchas cosas cambiarán hasta que su salida a la venta al público general.</p>

<!--more-->

<p>Si no lo has leído, te recomiendo que hagas un repaso rápido al artículo antes de seguir con este, ya que te aclarará aspectos básicos de Google Glass.</p>

<h3 id="configurando-el-entorno-de-desarrollo">Configurando el entorno de desarrollo</h3>

<p>El primer paso necesario para desarrollar para Google Glass será hacernos con el <strong>GDK (Glass Development Kit)</strong>, actualmente se encuentra disponible la versión <strong>Sneak Peak</strong>, que nos da indicaciones de que es en <strong>una versión muy inmadura</strong> y todo puede cambiar de una actualización a otra sin previo aviso.</p>

<p>Para instalar el GDK, nos vamos a Android Studio (actualmente versión 0.5.2), y abrimos el SDK Manager. Como comentamos en el artículo anterior, Google Glass funciona con Android 4.0.3, por lo que el GDK lo veremos bajo grupo <strong>Android 4.0.3 (API 15)</strong>, ahí encontraremos el Glass Development Kit Sneak Peek listo para instalar.</p>

<p><img src="/assets/images/1.InstalandoGDK.png" alt="Instalando GDK" /> Instalando GDK</p>

<p>Una vez instalado el GDK, ya podemos comenzar el desarrollo de nuestra primera aplicación. Antes os debo dar una mala noticia, a día de hoy <strong>no existe un emulador de Google Glass</strong>, así que no busquéis una imagen del sistema para Google Glass. A día de hoy la única forma de probar una aplicación Google Glass <strong>es tener una físicamente</strong> sobre la que instalar y depurar las mismas.</p>

<h3 id="creación-del-proyecto">Creación del proyecto</h3>

<p>Vamos a crear nuestra primera aplicación, para ello iniciamos el asistente de nuevo proyecto en nuestro Android Studio y lo configuramos como podéis ver en la siguiente imagen. Básicamente dado que Google Glass a día de hoy funciona solo con Android 4.0.3, pondremos este nivel de API como <strong><em>Minimum required SDK</em></strong> y <strong><em>Target SDK</em></strong>. Así tendremos la seguridad de no utilizar API que no tengamos disponible. Si en un futuro como ya se comienza a rumorear se actualiza Glass a una versión de Android más nueva, sería conveniente cambiar el <strong><em>Target SDK</em></strong> a la nueva versión.
Por último, vamos a poner en <strong><em>Compile with</em></strong> no la API 15, sino el <strong>Glass Development Kit Sneak Peak (Google Inc.) (API 15)</strong>. Os recomiendo desmarcar la opción de crear una primera actividad, a mi siempre me gusta <strong>partir de un proyecto vacío</strong> y crear, más que partir de un proyecto lleno de código demo y tener que estar haciendo limpieza.</p>

<p><img src="/assets/images/2.CreandoElProyecto.png" alt="Creando el proyecto" /> Creando el proyecto</p>

<h3 id="retocando-el-buildgradle">Retocando el build.gradle</h3>

<p>Una vez Android Studio termina de generarnos el proyecto, lo cierto es que al menos hasta la versión 0.5.2, tiene un bug por el que no genera bien el <em>app/build.gradle</em>. La opción de configuración que hemos puesto en el asistente como <strong><em>Compile with</em></strong> no la pone en el fichero de gradle. Para solucionarlo, lo abrimos y lo modificamos para que <em><strong>compileSdkVersion</strong></em> apunte al GDK quedando así:</p>

<div class="language-groovy highlighter-rouge"><pre class="highlight"><code><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">'android'</span>

<span class="n">android</span> <span class="o">{</span>
    <span class="n">compileSdkVersion</span> <span class="s2">"Google Inc.:Glass Development Kit Sneak Peek:15"</span>
    <span class="n">buildToolsVersion</span> <span class="s2">"19.0.2"</span>

    <span class="n">defaultConfig</span> <span class="o">{</span>
        <span class="n">minSdkVersion</span> <span class="mi">15</span>
        <span class="n">targetSdkVersion</span> <span class="mi">15</span>
<span class="o">...</span>
</code></pre>
</div>

<h3 id="androidmanifest-y-estilos">AndroidManifest y estilos</h3>

<p>El siguiente paso que debemos hacer será modificar el <strong><em>AndroidManifest.xml</em></strong> para requerir el GDK. Esto es opcional, si no lo requerimos no pasa nada, pero hay que tener en cuenta que entonces nuestra aplicación <strong>se podría instalar en otros dispositivos</strong> y al no tener estos la API del GDK, <strong>fallará</strong> al no encontrarlas.</p>

<p>Necesitamos agregar el siguiente trozo de código dentro de la etiqueta <em><strong>application</strong></em>:</p>

<div class="language-xml highlighter-rouge"><pre class="highlight"><code><span class="nt">&lt;uses-library</span>
    <span class="na">android:name=</span><span class="s">"com.google.android.glass"</span>
    <span class="na">android:required=</span><span class="s">"true"</span> <span class="nt">/&gt;</span>
</code></pre>
</div>

<p>Para terminar de configurar el proyecto antes de comenzar a escribir código de verdad, tendremos que modificar el fichero <strong><em>res/values/styles.xml</em></strong>, para cambiar el tema base que usará nuestra aplicación. Si dejamos el que pone Android Studio, <strong>nos aparecerá en nuestra aplicación Google Glass el Action Bar</strong>, cosa nada deseable. Debemos configurar el tema para que herede del tema que trae el sistema por defecto, quedando nuestro fichero <strong><em>styles.xml</em></strong> de la siguiente forma:</p>

<div class="language-xml highlighter-rouge"><pre class="highlight"><code><span class="nt">&lt;resources&gt;</span>

    <span class="c">&lt;!-- Base application theme. --&gt;</span>
    <span class="nt">&lt;style</span> <span class="na">name=</span><span class="s">"AppTheme"</span> <span class="na">parent=</span><span class="s">"@android:style/Theme.DeviceDefault"</span><span class="nt">&gt;</span>
        <span class="c">&lt;!-- Customize your theme here. --&gt;</span>
    <span class="nt">&lt;/style&gt;</span>

<span class="nt">&lt;/resources&gt;</span>
</code></pre>
</div>

<p>Y para hacer algo de limpieza en el proyecto, os recomiendo borrar las carpetas <em>drawable-mdpi</em>, <em>drawable-xhdpi</em>, <em>drawable-xxhdpi</em>, ya que Google Glass utiliza una resolución hdpi y en el estado actual veo poco recomendable dedicar tiempo a generar los recursos gráficos para todas esas densidades de píxel cuando en la actualidad solo se utiliza una.</p>

<h3 id="helloworld-from-glass">Helloworld from Glass!</h3>

<p>Ya tenemos nuestro proyecto listo para comenzar a desarrollar, los pasos anteriores hasta que mejore el soporte de Android Studio para el desarrollo de Glassware, serán el pan de cada día. A partir de ahora, vamos a generar una simple actividad, que muestre un mensaje en pantalla y configuraremos nuestra aplicación para que el usuario pueda lanzarla con un comando de voz.</p>

<p>Creamos una nueva clase llamada <strong><em>HelloWorldActivity</em></strong>, haciendo que extienda de <strong><em>Activity</em></strong>. Y como siempre en cualquier aplicación Android, sobrescribimos el método <em><strong>onCreate()</strong></em> y establecemos el layout para nuestra actividad.</p>

<div class="language-java highlighter-rouge"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">android.app.Activity</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">android.os.Bundle</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloWorldActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
        <span class="n">setContentView</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">activity_helloworld</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre>
</div>

<p>A continuación, ya sea con el acceso directo (Alt + Enter con el cursor sobre layout) o directamente creando el layout en la carpeta <strong><em>res/layout/activity_helloworld.xml</em></strong>, generamos nuestra vista. En ella utilizaremos un simple TextView de la siguiente forma:</p>

<div class="language-xml highlighter-rouge"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span>

<span class="nt">&lt;TextView</span> <span class="na">xmlns:android=</span><span class="s">"http://schemas.android.com/apk/res/android"</span>
    <span class="na">android:layout_width=</span><span class="s">"match_parent"</span>
    <span class="na">android:layout_height=</span><span class="s">"match_parent"</span>
    <span class="na">android:gravity=</span><span class="s">"center"</span>
    <span class="na">android:text=</span><span class="s">"HelloWorld!"</span><span class="nt">/&gt;</span>
</code></pre>
</div>

<p>Ahora que ya tenemos nuestra actividad, vamos a crear el lanzador por comando de voz. Para ello tenemos que <strong>crear un Voice Trigger</strong>. Un Voice Trigger es un pequeño fichero XML en el que indicamos a Android el <strong>comando de voz</strong> que queremos que lance nuestra aplicación. Para ello, crear un fichero en <strong><em>res/xml/trigger.xml</em></strong>. En él, pondremos el siguiente código:</p>

<div class="language-xml highlighter-rouge"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span>

<span class="nt">&lt;trigger</span> <span class="na">keyword=</span><span class="s">"@string/glass_voice_trigger"</span><span class="nt">/&gt;</span>
</code></pre>
</div>

<p>Muy simple, solo estamos indicando cuál es la frase que lanza nuestra aplicación. Vamos ahora a nuestro fichero <em><strong>res/values/string.xml</strong></em> y creamos la cadena <strong><em>glass_voice_trigger</em></strong> con el valor <em>say hello</em>.</p>

<div class="language-xml highlighter-rouge"><pre class="highlight"><code><span class="nt">&lt;resources&gt;</span>

...

    <span class="nt">&lt;string</span> <span class="na">name=</span><span class="s">"glass_voice_trigger"</span><span class="nt">&gt;</span>say hello<span class="nt">&lt;/string&gt;</span>

...

<span class="nt">&lt;/resources&gt;</span>
</code></pre>
</div>

<p>Pero, ¿cómo relaciona Glass el comando de voz con la actividad que queremos que lance? Pues como siempre en Android, todo ello se configura como un <strong><em>intent-filter</em></strong>, con el cual indicaremos al sistema qué comando de voz queremos que dispare nuestra actividad. Nos vamos al <strong><em>AndroidManifest.xml</em></strong> y agregamos la actividad que hemos creado, añadiendo un <strong><em>intent-filter</em></strong> que capture la acción <strong><em>com.google.android.glass.action.VOICE_TRIGGER</em></strong> y añadimos como metadatos el fichero xml que creamos anteriormente, quedando así:</p>

<div class="language-xml highlighter-rouge"><pre class="highlight"><code>...
    <span class="nt">&lt;application</span> <span class="err">...</span><span class="nt">&gt;</span>

        ...

        <span class="nt">&lt;activity</span>
            <span class="na">android:name=</span><span class="s">".HelloWorldActivity"</span>
            <span class="na">android:label=</span><span class="s">"@string/app_name"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;intent-filter&gt;</span>
                <span class="nt">&lt;action</span> <span class="na">android:name=</span><span class="s">"com.google.android.glass.action.VOICE_TRIGGER"</span> <span class="nt">/&gt;</span>
            <span class="nt">&lt;/intent-filter&gt;</span>

            <span class="nt">&lt;meta-data</span> <span class="na">android:name=</span><span class="s">"com.google.android.glass.VoiceTrigger"</span>
                       <span class="na">android:resource=</span><span class="s">"@xml/trigger"</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;/activity&gt;</span>

    <span class="nt">&lt;/application&gt;</span>
...
</code></pre>
</div>

<p>Y con esto ya tenemos nuestra aplicación lista para ser lanzada. Conectamos la Google Glass y lanzamos la aplicación. Una cosa que notaréis es que el entorno os dirá que no tenéis definido ninguna actividad principal. Ignoradlo y haced que se lance sin configurar ninguna actividad por defecto.</p>

<p><img src="/assets/images/3.LanzandoLaApp.png" alt="Configurar el lanzamiento de nuestra app" /> Configurar el lanzamiento de nuestra app</p>

<p>Una vez instalada, solo nos queda decir “Ok glass, say hello”. En el desarrollo normal de la aplicación, nos interesará que esta se lance directamente sin tener que decir el comando de voz, simplemente tenemos que volver a acceder a la pantalla anterior y establecer la actividad que queremos que se inicie cada vez que lancemos la aplicación desde Android Studio.</p>

<p><img src="/assets/images/4.HelloWorld.png" alt="App HelloWorld" /> App HelloWorld</p>

<p>El código de este artículo lo tenéis en el siguiente repositorio, bajo la carpeta <strong>1.Helloworld</strong>. <em>Happy coding!</em></p>

<p>[github repo=”raycoarana/google_glass_first_steps”]</p>

<h3 id="continuará">Continuará…</h3>

<p>En el próximo artículo veremos cómo jugar un poco más con los trigger, qué configuración nos permite y cómo podemos obtener datos de lo que nos diga el usuario.</p>

	  ]]></description>
	</item>


</channel>
</rss>
