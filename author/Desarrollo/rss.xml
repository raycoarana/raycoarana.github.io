<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>raycoarana.com</title>
   
   <link>http://raycoarana.com/</link>
   <description>My coding adventures and other random stuff</description>
   <language>en-uk</language>
   <managingEditor> Rayco Araña</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Calligraphy, fuentes personalizadas en Android</title>
	  <link>//blog/2014/06/calligraphy-fuentes-personalizadas-android/</link>
	  <author>Rayco Araña</author>
	  <pubDate>2014-06-16T21:15:48+02:00</pubDate>
	  <guid>//blog/2014/06/calligraphy-fuentes-personalizadas-android/</guid>
	  <description><![CDATA[
	     <p>Si hay una cosa que es un <strong>dolor de muelas</strong> en Android es cuando tienes que hacer una app que usa <strong>fuentes personalizadas</strong>. Aunque es incluso peor, si queremos usar la moderna Roboto, ya tenemos el lío formado, ya que en Android 2.3 no la tendremos tampoco. Y es que utilizar fuentes personalizadas es algo que está muy mal resuelto incluso aún hoy en la última versión del sistema (4.4.3 a día de hoy).</p>

<p>Básicamente para establecer una fuente distinta a las que trae el sistema por defecto, debemos instanciar la fuente (que normalmente tendremos en la carpeta <strong>assets</strong>) y asignarla a la vista de turno. El código sería algo así de horrible (horrible porque hacer esto por cada vista es una locura desde el punto de vista de mantenimiento de este tipo de código).</p>

<p>[code language=”java”]
Typeface tf = Typeface.createFromAsset(getAssets(), 
                                       “fonts/mycustomfont.ttf”);</p>

<p>TextView myView = (TextView) findViewById(android.R.id.text1);
myView.setTypeface(tf);
[/code]</p>

<p>Vamos a ver algunas formas para mejorar lo anterior y dejar que nuestras vistas se <strong>definan de forma declarativa</strong> por completo en el XML del layout.</p>

<!-- more -->

<p>[sh_margin margin=”20”]</p>

<h3 id="solución-1-controles-personalizados">Solución 1. Controles personalizados</h3>

<p>Una primera solución a este problema es utilizar controles personalizados para agregarles un atributo en el que indiquemos que fuente utilizar. Existen varias librerías que implementan esta forma de trabajo con las que simplemente debes utilizar sus vistas en vez de las vistas por defecto. Por ejemplo la librería <a href="https://github.com/neopixl/PixlUI">PixlUI</a> utiliza esta aproximación.</p>

<p>¿Desventajas de esta forma de trabajo? Pues que implica agregar una dependencia en todo el proyecto con esta librería, introduciendo sus atributos propios en las vistas. Además lo peor es que el editor de layouts pierde muchas veces la capacidad de mostrar el predictivo a la hora de escribir atributos. Además las vistas nos quedarán con esos <strong>nombres de controles enormes</strong> que incluyen el nombre del paquete de la clase y hacen menos legible nuestro código.</p>

<p>[code language=”xml”]
<?xml version="1.0" encoding="utf-8"?></p>

<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android" xmlns:pixlui="http://schemas.android.com/apk/com.neopixl.pixlui" android:layout_width="match_parent" android:layout_height="match_parent">

    <com.neopixl.pixlui.components.textview.TextView android:layout_width="match_parent" android:layout_height="wrap_content" android:text="@string/text_of_my_view" android:gravity="center" android:textSize="36sp" pixlui:typeface="mycustomfont.ttf" />

...

</LinearLayout>
<p>[/code]</p>

<p>[sh_margin margin=”20”]</p>

<h3 id="solución-2-calligraphy">Solución 2. Calligraphy</h3>

<p>Esta otra solución, implementada por esta librería llamada Calligraphy es tremendamente interesante, con <strong>una aproximación mucho más elegante</strong> a la hora de resolver el problema. En vez de regar nuestra aplicación con referencias a controles externos, esta librería crea un <strong>Wrapper tanto al objeto Context como al objeto LayoutInflater</strong> para interceptar toda referencia a las clases <em>TextView</em>, <em>Button</em>, <em>EditText</em>, <em>AutoCompleteTextView</em>, <em>MultiAutoCompleteTextView</em>, <em>CheckBox</em>, <em>RadioButton</em> y <em>ToggleButton</em>. Cuando detecta la instanciación de cualquiera de estos en nuestro <em>layout</em>, crea la fuente asociada y se la asigna a la vista. Esto además haciendo uso de una caché de fuentes y demás optimizaciones.</p>

<p>Para que esto funcione, lo que tendremos que hacer es <strong>envolver</strong> el contexto de nuestra actividad con este <strong>Wrapper</strong>, haciendo lo siguiente:</p>

<p>[code language=”java”]
@Override
protected void attachBaseContext(Context newBase) {
    super.attachBaseContext(new CalligraphyContextWrapper(newBase));
}
[/code]</p>

<p>Ahora solo nos queda indicar que fuente queremos usar en las vistas, retomando el ejemplo anterior, sería algo así:</p>

<p>[code language=”xml”]
<?xml version="1.0" encoding="utf-8"?></p>

<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android" android:layout_width="match_parent" android:layout_height="match_parent">

    <TextView android:layout_width="match_parent" android:layout_height="wrap_content" android:text="@string/text_of_my_view" android:gravity="center" android:textSize="36sp" android:fontFamily="fonts/mycustomfont.ttf" />

...

</LinearLayout>
<p>[/code]</p>

<p>Por defecto como puedes ver se reutiliza la propiedad <strong>fontFamily</strong> para indicar la fuente que queremos usar, si bien esto nos puede acarrear problemas a futuro si Google cambia el uso de esa propiedad o le da otro uso (aunque esto sería muy raro). Calligraphy nos ofrece <strong>la posibilidad de usar un atributo personalizado</strong>, para ello primero debemos crearnos el atributo, en el fichero attrbs.xml por ejemplo.</p>

<p>[code language=”xml”]
<?xml version="1.0" encoding="utf-8"?></p>
<Resources>
    <attr name="customFont" />
</Resources>
<p>[/code]</p>

<p>Ahora necesitamos indicarle a Calligraphy cual es el atributo que vamos a usar.</p>

<p>[code language=”java”]
@Override
protected void attachBaseContext(Context newBase) {
    super.attachBaseContext(new CalligraphyContextWrapper(newBase, R.attr.customFont));
}
[/code]</p>

<p>Y ya solo nos queda utilizarlo en las vistas.</p>

<p>[code language=”xml”]
<?xml version="1.0" encoding="utf-8"?></p>

<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android" android:layout_width="match_parent" android:layout_height="match_parent">

    <TextView android:layout_width="match_parent" android:layout_height="wrap_content" android:text="@string/text_of_my_view" android:gravity="center" android:textSize="36sp" customFont="fonts/mycustomfont.ttf" />

...

</LinearLayout>
<p>[/code]</p>

<p>[sh_margin margin=”20”]</p>

<h3 id="conclusiones">Conclusiones</h3>

<p>Sin duda Calligraphy <strong>es lo que Google debería haber soportado en Android desde hace mucho tiempo</strong>. Integrándolo en la librería de compatibilidad abriría incluso su uso en cualquier versión de la API. Su solución es bastante limpia, no acopla todo nuestro código a controles personalizados y nos permite gestionar todo con estilos y temas, por lo que <strong>podemos centralizar el uso de las fuentes en nuestros ficheros de estilos</strong>. Os dejo el enlace al repositorio donde podéis encontrar el código y ver cómo funciona.</p>

<p>[github repo=”chrisjenx/Calligraphy”]</p>

	  ]]></description>
	</item>

	<item>
	  <title>Parcelables con Android AutoParcel</title>
	  <link>//blog/2014/06/parcelables-con-android-autoparcel/</link>
	  <author>Rayco Araña</author>
	  <pubDate>2014-06-09T22:29:34+02:00</pubDate>
	  <guid>//blog/2014/06/parcelables-con-android-autoparcel/</guid>
	  <description><![CDATA[
	     <p>Cuando vamos a crear una app en Android y tenemos que pasar datos entre <strong>Activities</strong> y/o <strong>Fragments</strong>, el sistema operativo nos brinda la posibilidad de usar un <strong>Bundle</strong>, ya sea a través del <strong>Intent **(y el Bundle de extras) o a través del método <em>**setArguments()**</em> de los Fragments. Esta es la manera idónea de pasar datos entre componentes, ya que **no crea acoplamientos poco deseables</strong>, además estos se gestionan de manera automática por el sistema, por lo que no debemos preocuparnos de qué pasa con ellos si el sistema ha tenido que recrear el Activity o Fragment debido al ciclo de vida de la aplicación.</p>

<p>El problema viene con los tipos de datos que nos permite almacenar un Bundle, estos son tipos básicos u objetos que implementen la interfaz <strong>Serializable</strong> o <strong>Parcelable</strong>. A la hora de implementar una u otra interfaz, la primera es sencilla, con solo hacer que nuestra clase implemente la interfaz Serializable el sistema <strong>por medio de reflexión es capaz de serializar el objeto a una representación binaria</strong> que se puede persistir. En el caso de Parcelable, sin embargo, debemos implementar dos métodos para serializar -_writeToParcel()<em>- y deserializar -_constructor</em>- el objeto. Además debemos escribirlo con sumo cuidado y en perfecto orden inverso o no funcionará, algo muy <strong>tedioso y difícil de mantener</strong>.</p>

<!-- more -->

<p>[sh_margin margin=”20”]</p>

<h3 id="porqué-usar-parcelable-sobre-serializable">¿Porqué usar Parcelable sobre Serializable?</h3>

<p>La principal razón para implementar Parcelable sobre Serializable es su velocidad de ejecución, se habla de hasta <strong>10x más rápido</strong> trabajar con objetos Parcelable. Si estamos en un entorno móvil, esto se traduce no solo en <strong>mayor rapidez</strong>, sino también en <strong>menor consumo de batería</strong>, algo que nunca debemos obviar a la hora de desarrollar apps.
Como decimos esta gran ventaja en cuanto a velocidad viene con un precio y es que la implementación y sobre todo el mantenimiento de este tipo de objetos es muy tediosa, siendo una tarea muy repetitiva y donde es muy fácil cometer errores.</p>

<p>[sh_margin margin=”20”]</p>

<h3 id="android-autoparcel-al-rescate">Android AutoParcel al rescate</h3>

<p>Para solucionar esto, existe una librería muy interesante, o más que librería deberíamos hablar de <strong>plug-in para Gradle</strong>, que en tiempo de compilación, es capaz de generar el código de serialización y deserialización de nuestros objetos. Al ser en tiempo de compilación, no penaliza en absoluto la ejecución y nos beneficiamos de no tener que lidiar con los tediosos métodos de la interfaz Parcelable. Esta se llama <a href="https://github.com/frankiesardo/auto-parcel">Android AutoParcel</a> y es un port de la librería <a href="https://github.com/google/auto/tree/master/value">Google AutoValue</a>.</p>

<p>Vamos a ver cómo podemos integrar fácilmente este plug-in en nuestros proyectos y cómo usarlo. Lo primero será modificar el fichero raíz <strong>build.gradle</strong>, donde agregaremos en las dependencias la siguiente línea:</p>

<p>[code language=”groovy”]
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath ‘com.android.tools.build:gradle:0.11.+’
        classpath ‘com.neenbedankt.gradle.plugins:android-apt:+’
    }
}</p>

<p>allprojects {
    repositories {
        mavenCentral()
    }
}
[/code]</p>

<p>Ahora nos vamos al fichero <strong>build.gradle</strong> de la aplicación, lo primero será aplicar el plug-in <strong>android-apt</strong> y luego agregamos en la sección de dependencias del proyecto tanto el procesador que generará el código en tiempo de compilación como la librería con las anotaciones de AutoParcel.</p>

<p>[code language=”groovy”]
apply plugin: ‘android’
apply plugin: ‘android-apt’</p>

<p>android {
    …
}</p>

<p>dependencies {
    compile fileTree(dir: ‘libs’, include: [‘*.jar’])
    compile ‘com.github.frankiesardo:android-auto-value:+’
    apt ‘com.github.frankiesardo:android-auto-value-processor:+’
}
[/code]</p>

<p>Ahora refrescamos el proyecto y vamos a escribir nuestro primer objeto con AutoParcel. Nuestras <strong>clases tendrán que ser abstractas</strong> y <strong>por cada propiedad que queramos que tenga, debemos generar un método abstracto</strong> para obtener su valor.</p>

<p>[code language=”java”]
import android.auto.value.AutoValue;
import android.os.Parcelable;</p>

<p>@AutoValue
public abstract class Foo implements Parcelable {</p>

<p>public abstract String fooString();
   public abstract int fooInteger();</p>

<p>}
[/code]</p>

<p>Solo nos falta una forma para poder construir objetos de tipo Foo, para ello agregamos un método estático con todos los valores e internamente y llamaremos en su interior al constructor del objeto que AutoParcel genera. El orden de los parámetros será el mismo con el que hemos escrito nuestra clase abstracta. Al momento de escribir este código muy probablemente la clase <strong>AutoValue_Foo</strong> aún no exista, debemos compilar para que el generador se ejecute y cree la clase.</p>

<p>[code language=”java”]
import android.auto.value.AutoValue;
import android.os.Parcelable;</p>

<p>@AutoValue
public abstract class Foo implements Parcelable {</p>

<p>public abstract String fooString();
   public abstract int fooInteger();</p>

<p>public static final Foo create(String fooString, int fooInteger) {
      return new AutoValue_Foo(fooString, fooInteger);
   }</p>

<p>}
[/code]</p>

<p>Y con esto ya está todo, de esta forma tan simple podemos ahora generar objetos que utilizar como argumentos o extras para los <em>Fragments _y _Activities</em> que usemos en nuestras aplicaciones, reduciendo la cantidad de código que tenemos que escribir considerablemente y sin caer en malas prácticas acoplando los componentes de nuestra aplicación.</p>

<p>[sh_margin margin=”20”]</p>

<h3 id="más-info">Más info</h3>

<p>Puedes obtener más info y acceder al código en su página en GitHub.</p>

<p>[github repo=”frankiesardo/auto-parcel”]</p>

	  ]]></description>
	</item>

	<item>
	  <title>Timeline y Live Cards. Primeros pasos con Google Glass (V)</title>
	  <link>//blog/2014/04/timeline-y-live-cards-primeros-pasos-con-google-glass-iv/</link>
	  <author>Rayco Araña</author>
	  <pubDate>2014-04-29T23:00:32+02:00</pubDate>
	  <guid>//blog/2014/04/timeline-y-live-cards-primeros-pasos-con-google-glass-iv/</guid>
	  <description><![CDATA[
	     <p>Hace mucho que no escribía en el blog, entre otras cosas porque ando un poco liado con un proyecto personal. Además, como ya sabrás Google ha actualizado Google Glass a la versión de firmware XE16, subiendo la versión de Android a 4.4.2, actualizando también el GDK y por consiguiente, nos trae muchos cambios en la API. Esto ha implicado que parte de este artículo ya no tenga sentido, ya que Google ha eliminado la clase TimelineManager y por tanto, ya no es posible publicar en el Timeline tarjetas estáticas.</p>

<p>[sh_margin margin=”20”]</p>

<h3 id="cambios-en-el-gdk">Cambios en el GDK</h3>

<p>Antes de continuar con la última entrega en esta serie de artículos de introducción a Google Glass, toca actualizar los anteriores. En el repositorio Git donde está el código de todos los artículos anteriores, podrás encontrar los proyectos actualizados con estos cambios, no son muchos y la mayoría no son más que cambios de nombres.</p>

<!-- more -->

<ul>
  <li>
    <p><strong>Nuevo permiso para comandos de voz propios.</strong> Si queremos utilizar comandos de voz que están fuera de la lista oficial de comandos, tendrás que añadir el permiso <em><strong>com.google.android.glass.permission.DEVELOPMENT</strong></em> en tu Manifest. Ni que decir tiene, que con este permiso no te permitirán subir la aplicación a MyGlass. Los comandos de voz permitidos están incluidos ahora como constantes en la clase <strong><em>VoiceTriggers.Command</em></strong> y en el tag <strong><em>trigger</em></strong> debemos indicar el comando usando el atributo <strong><em>command</em></strong>
.</p>
  </li>
  <li>
    <p><strong>Clase Card.</strong> Cambia el nombre del método <em>toView()</em> a <em>getView()</em>. Además existe una sobrecarga para la reutilización de vistas cuando se utiliza dentro de un CardScrollView.</p>
  </li>
  <li>
    <p><strong>Clases CardScrollView y CardScrollAdapter.</strong> Hay varios métodos que ya no existen o que ya no se pueden sobrescribir.</p>
  </li>
</ul>

<p>El resto de cambios afectan a API que no hemos visto, como la que ya hemos comentado, la desaparición de la clase <em>TimelineManager</em>. Si quieres ver el resto de cambios, puedes consultar las <a href="https://developers.google.com/glass/release-notes">Release Notes</a> que ha publicado Google.</p>

<p>[sh_margin margin=”20”]</p>

<h3 id="static-cards">Static Cards</h3>

<p>Como decíamos anteriormente, las Static Cards ya no existen como tal. Anteriormente, usando la clase <em>TimelineManager</em> era posible publicar una tarjeta (objetos de tipo Card) directamente al Timeline, en la parte derecha que corresponde al pasado. El problema de esta API es que estas tarjetas no eran muy útiles, ya que el usuario no podía interactuar con ellas. No era posible asociarle un menú con el que poder interactuar y es esta seguramente la principal razón de su eliminación. Por lo tanto una Static Card no será más que una Live Card cuya vista permanece estática, aunque esto siempre será en la parte del futuro. ¿Y para el pasado? A mí esto me huele a próxima integración con la nueva API de Wearables que tenemos en Android y las tarjetas estáticas serán notificaciones.</p>

<p>[sh_margin margin=”20”]</p>

<h3 id="live-cards">Live Cards</h3>

<p>Las Live Cards son por tanto la única forma que tenemos para insertar tarjetas en el Timeline de Google Glass (al menos por ahora). Para crear una tarjeta, basta con construir un objeto de tipo <strong><em>LiveCard</em></strong>, pasando el contexto y un tag con el que identificamos a la tarjeta.</p>

<p>[code language=”java”]
LiveCard liveCard = new LiveCard(this, “simple-card”);
[/code]</p>

<p>Una vez tenemos nuestra tarjeta, necesitamos decirle qué queremos mostrar. Existen dos tipos de Live Cards, en función de la frecuencia de actualización de la interfaz que necesitemos, las creadas a partir de una vista normal para baja frecuencia de actualización o las creadas sobre un SurfaceHolder, para por ejemplo, pintar con OpenGL, cuando se requiera una frecuencia de actualización alta. Es decir, si vamos a modificar el contenido de nuestra Live Card una o dos veces por segundo como mucho, la primera aproximación es la adecuada. Si por contra vamos a crear un compass, realidad aumentada o algo que necesite una frecuencia de 20-30 o más veces por segundo, debemos optar por la segunda opción.</p>

<p>Para las primeras, debemos asignarle una <strong>RemoteView</strong>. Esto ya nos debería sonar, en Android las <strong>RemoteView **se utilizan para cuando queremos crear Widgets y en cierta manera es justo lo que queremos hacer ahora, queremos darle a otra aplicación (el Timeline) una vista para que la muestre desde nuestra aplicación. Hay que tener esto claro para entender por qué no podemos poner cualquier vista en una **RemoteView</strong> y como es además su forma de actualización a través del objeto <strong>RemoveView</strong>, realmente <strong>nos estamos comunicando con otra aplicación</strong>, que vive en otro contexto distinto al de nuestra app.</p>

<p>[code language=”java”]
RemoteViews views = new RemoteViews(context.getPackageName(), 
                                    R.layout.view_of_my_livecard);
liveCard.setViews(views);
[/code]</p>

<p>Para las segundas, como comentamos necesitamos activar el <em>flag</em> de que nos vamos a encargar nosotros directamente del pintado y hacerlo mediante el <em>callback</em> que nos proporciona el <strong><em>SurfaceHolder</em></strong>. A partir de aquí podríamos crear un contexto de OpenGL por ejemplo y a partir de ahí crear lo que queramos. Pero eso ya no forma parte de esta serie de artículos de introducción a Google Glass, ya que lo podemos considerar como un aspecto avanzado y al que aplican las mismas reglas a partir de aquí a cualquier aplicación Android que use un SurfaceHolder.rfaceHolder_**.</p>

<p>[code language=”java”]
liveCard.setDirectRenderingEnabled(true);
liveCard.getSurfaceHolder().addCallback(callback);
[/code]</p>

<p>Una vez tenemos ya configurada nuestra Live Card, solo nos queda publicarla, para ello es tan sencillo como llamar al método <strong><em>publish()</em></strong>. Este método nos pide un parámetro para indicar la forma de publicación, <strong>REVEAL</strong> o <strong>SILENT</strong>. Con REVEAL le estamos indicando al Timeline que debe llevar al usuario a nuestra tarjeta recién publicada. Si por contra utilizamos SILENT, como nos podemos imaginar, la tarjeta se publicará sin <em>molestar</em> al usuario.</p>

<p>Pero… ¿realmente ya está? La verdad es que no. Si ejecutamos el código que hemos ido viendo y lo ejecutamos en una actividad, veremos que al salir de esta y volver al Timeline, nuestra tarjeta no existe. El problema es el ciclo de vida de nuestra aplicación y la tarjeta. Si recordáis del desarrollo de Widgets en Android, era siempre necesario tener un servicio en el que se apoyase el Widget y en el caso de las Live Cards nos ocurre igual, debemos crear un servicio y asociarlo a nuestra <em>LiveCard</em> utilizando el método <strong><em>attach()</em></strong> o creándolo directamente desde el propio servicio y que este gestione explícitamente su ciclo de vida.</p>

<p>[code language=”java”]
liveCard.attach(myService);
liveCard.publish(PublishMode.REVEAL);
[/code]</p>

<p>[sh_margin margin=”20”]</p>

<h3 id="manos-a-la-obra">Manos a la obra</h3>

<p>Vamos a crear un ejemplo completo, vamos a crear un <strong>Voice Trigger con Prompt</strong> el cual lanzará un servicio. En este servicio, con cada Intent recibido, actualizaremos la Live Card para que muestre el texto que ha dictado el usuario. Además, llevaremos al usuario a dicha tarjeta una vez la hemos actualizado. Empezamos!</p>

<p>En primer lugar creamos el layout de nuestra Live Card. Vamos a hacer algo sencillo, simplemente un TextView en el que mostrar el texto.</p>

<p>[code language=”xml”]</p>
<TextView xmlns:android="http://schemas.android.com/apk/res/android" android:id="@+id/my_card_content" android:layout_width="match_parent" android:layout_height="match_parent" />

<p>[/code]</p>

<p>Ahora vamos a crear el servicio, primero el esqueleto del mismo.</p>

<p>[code language=”java”]
public class Demo4Service extends Service {</p>

<div class="highlighter-rouge"><pre class="highlight"><code>@Override
public IBinder onBind(Intent intent) {
    return null;
}

@Override
public int onStartCommand(Intent intent, int flags, int startId) {
    ...
    return START_STICKY;
}

@Override
public void onDestroy() {
    ...
} } [/code]
</code></pre>
</div>

<p>Ahora en el método <strong><em>onStartCommand()</em></strong> recibiremos cada uno de los Intent que el usuario vaya lanzando, así que lo primero será transformar el texto obtenido desde la lista a una simple String.</p>

<p>[code language=”java”]
    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        ArrayList<String> voiceResults = intent.getExtras().getStringArrayList(RecognizerIntent.EXTRA_RESULTS);</String></p>

<div class="highlighter-rouge"><pre class="highlight"><code>    StringBuilder userContent = new StringBuilder();
    for (String voiceToken : voiceResults) {
        userContent.append(voiceToken);
        userContent.append(" ");
    } ... [/code]
</code></pre>
</div>

<p>Una vez tenemos ya la cadena a mostrar, vamos a crear la tarjeta. La tarjeta solo será necesaria crearla si es la primera vez que el usuario lanza el comando desde el inicio del servicio. Si este ya estaba en ejecución, la tarjeta ya existe y solo tendremos que actualizarla. Para esto es importante quedarnos con una instancia siempre de la tarjeta a nivel de servicio.</p>

<p>[code language=”java”]
…
        boolean haveToPublish = false;
        if (mLiveCard == null) {
            mLiveCard = new LiveCard(this, “simple-card”);
            mLiveCard.setAction(PendingIntent.getActivity(this, 0, new Intent(this, MenuActivity.class), 0));
            mRemoteViews = new RemoteViews(getPackageName(), R.layout.view_of_my_livecard);
            haveToPublish = true;
        }
…
[/code]</p>

<p>En el trozo de código anterior podemos ver cómo creamos la tarjeta y cómo le asignamos una acción. <strong>¡Ojo con esto porque es obligatorio!</strong>, si no definimos una acción a nuestra tarjeta, esta no se publicará. <strong>Si nuestra tarjeta no tiene de verdad ninguna función a mostrar</strong> cuando el usuario pulsa sobre ella, debemos lanzar una actividad, que no haga ni muestre nada, pero que reproduzca el <strong>sonido correspondiente para indicar al usuario que no existe acción posible</strong>. Esto es algo en lo que insisto mucho siempre a los desarrolladores, siempre, siempre, siempre hay que dar feedback al usuario de lo que está pasando, para que no se quede dando TAPs al TouchPad para ver si se muestra algo y no saber si es que no hay nada, no funciona o el dispositivo no funciona bien.</p>

<p>También podemos ver en este trozo de código cómo creamos la vista de nuestra tarjeta, que como hemos hablado anteriormente, se trata de una <strong>RemoteView</strong>. También nos guardamos la instancia de la <strong>RemoteView</strong> para poder actualizarla a posteriori.</p>

<p>Lo siguiente será un código que se ejecutará siempre, independientemente de si la tarjeta existía con anterioridad o no y es la actualización de la vista con el texto dictado por el usuario. Para ello utilizamos uno de los métodos soportados por el objeto <strong>RemoteViews</strong> para actualizar el contenido de esa vista remota. Una vez lo hemos actualizado, necesitamos reasignarlo a la Live Card para que esta tenga conocimiento del cambio.</p>

<p>[code language=”java”]
…
        mRemoteViews.setTextViewText(R.id.my_card_content, userContent);
        mLiveCard.setViews(mRemoteViews);
…
[/code]</p>

<p>Ya por último dentro del método <em>onStartCommand()</em> nos falta publicar la tarjeta, si no estaba ya publicada o navegar hacia ella si ya lo estaba. Para ello nos ayudamos del flag que hemos definido anteriormente de la siguiente forma:</p>

<p>[code language=”java”]
…
        if(haveToPublish) {
            mLiveCard.publish(LiveCard.PublishMode.REVEAL);
        } else {
            mLiveCard.navigate();
        }
…
[/code]</p>

<p>Bien, ya tenemos creada nuestra tarjeta, ahora necesitamos implementar el evento onDestroy de nuestro servicio, donde vamos a retirar nuestra tarjeta del Timeline.</p>

<p>[code language=”java”]
    @Override
    public void onDestroy() {
        if (mLiveCard != null &amp;&amp; mLiveCard.isPublished()) {
            mLiveCard.unpublish();
            mLiveCard = null;
        }
        super.onDestroy();
    }
[/code]</p>

<p>Ya lo tenemos todo, ahora solo nos falta configurar el <em>AndroidManifest</em> y el Voice Trigger con su Prompt como ya sabemos. Lo primero el Voice Trigger con el Prompt.</p>

<p>[code language=”xml”]</p>
<trigger keyword="@string/trigger_show_my_card">
    <input prompt="@string/prompt_show_my_card" />
</trigger>
<p>[/code]</p>

<p>Y declaramos el servicio en el <em>AndroidManifest</em>, asociándolo al Voice Trigger.</p>

<p>[code language=”xml”]
…
        <service android:name=".Demo4Service">
            <intent-filter>
                <action android:name="com.google.android.glass.action.VOICE_TRIGGER"></action>
            </intent-filter></service></p>

<div class="highlighter-rouge"><pre class="highlight"><code>        &lt;meta-data android:name="com.google.android.glass.VoiceTrigger"
            android:resource="@xml/show_my_card_trigger" /&gt;
    &lt;/service&gt; ... [/code]
</code></pre>
</div>

<p><strong>Recordad añadir el permiso para poder usar comandos personalizados</strong></p>

<p>[sh_margin margin=”20”]</p>

<h3 id="interactuando-con-nuestra-live-card">Interactuando con nuestra Live Card</h3>

<p>Anteriormente hemos visto cómo añadíamos una acción a nuestra Live Card, algo que es obligatorio, así que para completar nuestra aplicación, debemos implementar ese MenuActivity, el cual deberá ser transparente y que al mostrarse deberá abrir el menú. Además, si el menú se cierra, debe finalizarse y dejar la tarjeta en primer plano. Es todo código que ya hemos hecho en anteriores artículos, pero vamos a repasarlo rápidamente.</p>

<p>Creamos el fichero de menú.</p>

<p>[code language=”xml”]</p>
<menu xmlns:android="http://schemas.android.com/apk/res/android">
    <item android:id="@+id/one" android:title="One" />
    <item android:id="@+id/two" android:title="Two" />
</menu>
<p>[/code]</p>

<p>Creamos la actividad, en la cual no necesitaremos el método <em>onCreate()</em> ya que esta no va a tener interfaz gráfica. Para asociarle un menú a la actividad, lo hacemos como siempre. Para simplificar, no le vamos a añadir código para cuando se selecciona alguna de las opciones del menú, pero en caso de querer hacer algo, solo tendríamos que añadir el código que corresponda en el <strong>switch</strong>.</p>

<p>[code language=”java”]
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.my_menu, menu);
        return true;
    }</p>

<div class="highlighter-rouge"><pre class="highlight"><code>@Override
public boolean onOptionsItemSelected(MenuItem item) {
    switch (item.getItemId()) {
        default:
            return super.onOptionsItemSelected(item);
    }
} [/code]
</code></pre>
</div>

<p>Ahora para hacer que el menú se muestre al abrir la actividad y que la actividad se finalice cuando el menú se cierre implementamos los siguientes métodos.</p>

<p>[code language=”java”]
    @Override
    public void onAttachedToWindow() {
        super.onAttachedToWindow();
        openOptionsMenu();
    }</p>

<div class="highlighter-rouge"><pre class="highlight"><code>@Override
public void onOptionsMenuClosed(Menu menu) {
    finish();
} [/code]
</code></pre>
</div>

<p>Ya solo nos quedan un par de pequeños detalles para terminar nuestra aplicación y poder ver nuestra Live Card en acción. Lo primero es hacer nuestra actividad transparente, para eso vamos a sobrescribir el tema para esta actividad por uno que haga el fondo transparente y elimine cualquier animación de entrada de la actividad. En nuestro fichero de estilos agregamos el siguiente tema. Esperemos que en un futuro GDK este tema venga incluido por defecto en el sistema.</p>

<p>[code language=”xml”]
    <style name="MenuTheme" parent="@android:style/Theme.DeviceDefault">
        <item name="android:windowBackground">@android:color/transparent</item>
        <item name="android:colorBackgroundCacheHint">@null</item>
        <item name="android:windowIsTranslucent">true</item>
        <item name="android:windowAnimationStyle">@null</item>
    </style>
[/code]</p>

<p>Por último nos queda registrar la actividad en el <em>AndroidManifest</em>, donde le asociaremos el tema que hemos creado.</p>

<p>[code language=”xml”]
        <activity android:name=".MenuActivity" android:theme="@style/MenuTheme"></activity>
[/code]</p>

<p>Ejecutamos el proyecto y decimos “ok glass, show my card”, nos saltará el Prompt y a continuación, nuestra tarjeta.</p>

<p>Y con esto terminamos esta serie de artículos dedicados a Google Glass. Esto es lo básico y que marca diferencia con una aplicación Android, si bien me reservo aún algún tema como la autenticación con cuentas Google y no Google en Glass, pero hay muchas más cosas con las que experimentar ahí fuera y por ahora y hasta que exista un gran cambio de API en Google Glass, creo que es algo ya superado. Como siempre tenéis disponible el código en el repositorio de GitHub de esta serie de artículos bajo la carpeta <strong>4.Timeline</strong>.</p>

<p>[github repo=”raycoarana/google_glass_first_steps”]</p>

<p>[sh_margin margin=”20”]</p>

<h3 id="conclusiones">Conclusiones</h3>

<p>Con la utilización de Google Glass en el día a día vemos que a pesar del gran <strong><em>hype</em></strong> que tiene a su alrededor, no es más que un dispositivo Wearable y como tal, tiene grandes usos específicos, pero a su vez grandes limitaciones en su utilización. Es un complemento ideal para que te guíe por medio de una ciudad que no conoces, pero nada apropiado para leer o interactuar con ellas durante un largo tiempo. Como siempre serán las apps las que hagan de este dispositivo algo útil y básico en nuestro día a día o una mera anécdota en la historia de los gadgets. Así pues, ¡su futuro está en vuestras manos!</p>

<p><em>Happy coding explorers! :-)</em></p>

	  ]]></description>
	</item>

	<item>
	  <title>Cards API. Primeros pasos con Google Glass (IV)</title>
	  <link>//blog/2014/03/cards-api-primeros-pasos-google-glass-iv/</link>
	  <author>Rayco Araña</author>
	  <pubDate>2014-03-31T09:00:45+02:00</pubDate>
	  <guid>//blog/2014/03/cards-api-primeros-pasos-google-glass-iv/</guid>
	  <description><![CDATA[
	     <p>Hoy vamos a ver cómo crear interfaces gráficas para nuestro Glassware utilizando el concepto de tarjetas o Cards. Como sabéis, en Google Glass no hay botones, no hay forma de interactuar con elementos en la interfaz gráfica, sino que esta se compone de pantallas por las que podemos movernos, pantallas que se denominan tarjetas o Cards. El propio Timeline que se representa en la inferfaz inicial de Google Glass es un conjunto de tarjetas por las que podemos movernos. ¿Cómo podemos crear una interfaz de este estilo? Pues de forma muy fácil utilizando las clases CardScrollView, CardScrollAdapter y Card. ¡Vamos a ello!</p>

<!-- more -->

<p>[sh_margin margin=”20”]</p>

<h3 id="crear-y-configurar-el-proyecto">Crear y configurar el proyecto</h3>

<p>Lo primero que debemos hacer será crear un nuevo proyecto. Para ello te recomiendo que sigas el artículo de <a href="http://raycoarana.com/desarrollo/primeros-pasos-con-google-glass-ii/">Primeros pasos con Google Glass (II)</a>, donde vimos cómo crear y configurar un proyecto en Android Studio para Google Glass.</p>

<p>Una vez hemos creado el proyecto vacío, vamos a crear una actividad donde mostraremos nuestra interfaz de tarjetas. Creamos una clase con nombre <strong><em>CardsActivity</em></strong> y la añadimos al <strong><em>AndroidManifest.xml</em></strong>. Si quieres puedes añadirle un comando de voz para lanzar la aplicación o por simplicidad, puedes configurar el entorno para lanzar la aplicación directamente como ya comentamos en el <a href="http://raycoarana.com/desarrollo/primeros-pasos-con-google-glass-ii/">segundo artículo de esta serie</a>. Recuerda que para poder lanzar la actividad desde el entorno esta tendrá que tener un <em>intent-filter</em> con la acción y categoría por defecto (<strong><em>…action.MAIN</em></strong> y <strong><em>…category.LAUNCHER</em></strong>). En esta ocasión no vamos a generar un layout para esta actividad, sino que usaremos directamente la vista CardScrollView como contenido de la actividad como veremos a continuación.</p>

<p>[sh_margin margin=”20”]</p>

<h3 id="cardscrollview-y-cardscrolladapter">CardScrollView y CardScrollAdapter</h3>

<p>La vista <strong><em>CardScrollView</em></strong> es la encargada de mostrar las tarjetas de forma lineal, permite moverse entre ellas con los gestos de <strong>Swipe hacia izquierda o derecha</strong> y todas las animaciones de aceleración al hacer el gesto de forma rápida para pasar rápido entre las distintas tarjetas. Para ello, el CardScrollView utiliza el mismo patrón que muchas otras vistas en Android, el <strong>patrón Adapter</strong>, para adaptar nuestro modelo al control visual que se muestra en pantalla. De esto se encarga el <strong><em>CardScrollAdapter</em></strong>, al cual el <strong><em>CardScrollView</em></strong> irá llamando para construir las tarjetas a mostrar en cada momento, encargándose por nosotros del ciclo de vida de las mismas.</p>

<p>Vamos a crear nuestra vista y asignarla como contenido de nuestra actividad, para ello en el método <strong><em>onCreate()</em></strong> de nuestra actividad hacemos lo siguiente:</p>

<p>[code language=”java”]
public class CardsActivity extends Activity {</p>

<div class="highlighter-rouge"><pre class="highlight"><code>private CardScrollView mCardScrollView;

@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);

    mCardScrollView = new CardScrollView(this);
    
    setContentView(mCardScrollView);
} } [/code]
</code></pre>
</div>

<p>Ya tenemos nuestra vista, pero ahora mismo poco va a mostrar ya que no tiene contenido. Vamos a añadirle algunas tarjetas, para ello vamos a crear y configurar un <strong><em>CardScrollAdapter</em></strong>. Para crear un <strong><em>CardScrollAdapter</em></strong>, tendremos que heredar la clase e implementar algunos métodos. Lo normal sería tener un modelo de datos asociado a cada tarjeta, pero para nuestro ejemplo, vamos a prescindir de ello para simplificar, por lo que solo tendremos que implementar el método <em><strong>getCount()</strong></em> y <em><strong>getView()</strong></em> para indicar el número de tarjetas y la vista de cada una de ellas respectivamente. Vamos a crear cuatro tarjetas, así que el código de nuestro Adapter quedaría algo así, donde delegamos la creación de las vistas en métodos que veremos a continuación.</p>

<p>[code language=”java”]
    CardScrollAdapter mCardScrollAdapter = new CardScrollAdapter() {</p>

<div class="highlighter-rouge"><pre class="highlight"><code>    @Override
    public int getCount() {
        return 4;
    }

    @Override
    public Object getItem(int i) {
        return null;
    }

    @Override
    public View getView(int i, View view, ViewGroup viewGroup) {
        View cardView;
        switch (i) {
            case 0:
                cardView = getFirstCardView();
                break;
            case 1:
                cardView = getSecondCardView();
                break;
            case 2:
                cardView = getThirdCardView();
                break;
            default: //case 3:
                cardView = getFourthCardView();
                break;
        }
        return cardView;
    }

    @Override
    public int findIdPosition(Object o) {
        return 0;
    }

    @Override
    public int findItemPosition(Object o) {
        return 0;
    }
}; [/code]
</code></pre>
</div>

<p>Como habéis visto, el <strong><em>CardScrollAdapter</em></strong>, como cualquier otro Adapter, lo que nos pide son vistas, por lo que podríamos crear cualquier tipo de vista para nuestras tarjetas. Sin embargo, Google ha incluido en el SDK la clase <strong><em>Card</em></strong> que nos <strong>permite crear vistas de forma sencilla</strong>, con el estilo de Glass sin tener que preocuparnos por nada. El que hayamos configurado nuestro Adapter con 4 elementos no es casualidad, vamos a ver las principales configuraciones de tarjetas que podemos crear con esta clase.</p>

<p>[sh_margin margin=”20”]</p>

<h3 id="tarjeta-simple-con-texto">Tarjeta simple con texto</h3>

<p>La primera tarjeta que crearemos será una sencilla que solo contendrá un texto. La clase <strong><em>Card</em></strong> requiere como parámetro el contexto y luego le asignaremos los datos a mostrar por la misma. Cuando hemos acabado, llamamos al método <strong><em>toView()</em></strong> para obtener la vista resultante.</p>

<p>[code language=”java”]
    private View getFirstCardView() {
        Card card = new Card(this);
        card.setText(“Tarjeta simple de texto”);
        return card.toView();
    }
[/code]</p>

<p>El resultado de este código es la siguiente tarjeta:</p>

<p>[caption id=”attachment_285” align=”aligncenter” width=”300”]<a href="http://raycoarana.com/wp-content/uploads/2014/03/tarjeta_texto.png"><img src="http://raycoarana.com/wp-content/uploads/2014/03/tarjeta_texto-300x168.png" alt="Tarjeta simple con texto" /></a> Tarjeta simple con texto[/caption]</p>

<p>[sh_margin margin=”20”]</p>

<h3 id="tarjeta-con-texto-e-imagen-a-la-izquierda">Tarjeta con texto e imagen a la izquierda</h3>

<p>Para añadir una imagen a la izquierda de la tarjeta, solo tendremos que llamar al método <strong><em>addImage()</em></strong> y establecer con <strong><em>setImageLayout()</em></strong> que esta esté alineada a la izquierda.</p>

<p>[code language=”java”]
    private View getSecondCardView() {
        Card card = new Card(this);
        card.setText(“Tarjeta con imagen a la izquierda”);
        card.setImageLayout(Card.ImageLayout.LEFT);
        card.addImage(R.drawable.audi);
        return card.toView();
    }
[/code]</p>

<p>El resultado lo podéis ver a continuación:</p>

<p>[caption id=”attachment_286” align=”aligncenter” width=”300”]<a href="http://raycoarana.com/wp-content/uploads/2014/03/tarjeta_texto_imagen_izq.png"><img src="http://raycoarana.com/wp-content/uploads/2014/03/tarjeta_texto_imagen_izq-300x168.png" alt="Tarjeta con texto e imagen a la izquierda" /></a> Tarjeta con texto e imagen a la izquierda[/caption]</p>

<p>[sh_margin margin=”20”]</p>

<h3 id="tarjeta-con-texto-e-imagen-al-fondo">Tarjeta con texto e imagen al fondo</h3>

<p>Si queremos que la imagen no esté a la izquierda sino que esté de fondo de la tarjeta, simplemente cambiamos el ImageLayout de la misma. Esto creará un ligero degradado a negro tras el texto para ganar contraste sobre la imagen.</p>

<p>[code language=”java”]
    private View getThirdCardView() {
        Card card = new Card(this);
        card.setText(“Tarjeta con imagen al fondo”);
        card.setImageLayout(Card.ImageLayout.FULL);
        card.addImage(R.drawable.opel);
        return card.toView();
    }
[/code]</p>

<p>La tarjeta resultante es la siguiente:</p>

<p>[caption id=”attachment_287” align=”aligncenter” width=”300”]<a href="http://raycoarana.com/wp-content/uploads/2014/03/tarjeta_texto_imagen_fondo.png"><img src="http://raycoarana.com/wp-content/uploads/2014/03/tarjeta_texto_imagen_fondo-300x168.png" alt="Tarjeta con imagen de fondo" /></a> Tarjeta con imagen de fondo[/caption]</p>

<p>[sh_margin margin=”20”]</p>

<h3 id="tarjeta-con-texto-nota-al-pie-y-varias-imágenes-a-la-izquierda">Tarjeta con texto, nota al pie y varias imágenes a la izquierda</h3>

<p>Podemos agregar varias imágenes, creándonos un mosaico con ellas. También podremos acompañar el texto principal con un texto al pie de la tarjeta.</p>

<p>[code language=”java”]
    private View getFourthCardView() {
        Card card = new Card(this);
        card.setText(“Tarjeta con texto al pie y varias imagenes”);
        card.setFootnote(“Texto pie de página”);
        card.setImageLayout(Card.ImageLayout.LEFT);
        card.addImage(R.drawable.audi);
        card.addImage(R.drawable.opel);
        return card.toView();
    }
[/code]</p>

<p>El resultado es la siguiente tarjeta:</p>

<p>[caption id=”attachment_288” align=”aligncenter” width=”300”]<a href="http://raycoarana.com/wp-content/uploads/2014/03/tarjeta_multiples_img.png"><img src="http://raycoarana.com/wp-content/uploads/2014/03/tarjeta_multiples_img-300x168.png" alt="Tarjeta con múltiples imágenes y pie" /></a> Tarjeta con múltiples imágenes y pie[/caption]</p>

<p>Ahora que ya tenemos nuestro Adapter con sus vistas, nos falta asignarlo al <strong><em>CardScrollView</em></strong> y activar este. Para ello añadimos estas líneas en el método <strong><em>onCreate()</em></strong> de la actividad.</p>

<p>[code language=”java”]
…
mCardScrollView.setAdapter(mCardScrollAdapter);
mCardScrollView.activate();
…
[/code]</p>

<p>Con esto si lanzamos la aplicación veremos la interfaz de tarjetas con cada una de ellas. Pero, ¿cómo podemos interactuar con ellas? No podemos poner un botón, implementar el OnClickListener no servirá de nada. ¿Entonces? ¿Cómo podemos darle opciones al usuario para realizar acciones sobre cada tarjeta?</p>

<p>[sh_margin margin=”20”]</p>

<h3 id="interactuando-con-una-tarjeta">Interactuando con una tarjeta</h3>

<p>Para interactuar con una tarjeta, debemos asignar un <strong><em>OnItemClickListener</em></strong> al <strong><em>CardScrollView</em></strong>. Cada vez que el usuario haga <em>TAP</em>, la vista nos notificará con la información relativa a la tarjeta sobre la que se ha realizado la pulsación en el TouchPad. En el método <strong><em>onCreate()</em></strong> de nuestra actividad, añadimos la siguiente línea:</p>

<p>[code language=”java”]
…
mCardScrollView.setOnItemClickListener(this);
…
[/code]</p>

<p>Ahora nos queda hacer que nuestra actividad implemente esa interfaz <strong><em>OnItemClickListener</em></strong> y añadir el método <strong><em>OnItemClick()</em></strong>.</p>

<p>[code language=”java”]
…
public class CardsActivity extends Activity implements AdapterView.OnItemClickListener {</p>

<div class="highlighter-rouge"><pre class="highlight"><code>...

@Override
public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position, long id) {

} } [/code]
</code></pre>
</div>

<p>Bien ahora que ya somos notificados sobre la pulsación sobre una tarjeta, ¿cómo podemos mostrar al usuario operaciones que hacer sobre estos elementos que está viendo? Pues haciendo uso de los menús de Android. En Google Glass, los menús se comportan de manera distinta, mostrándose cada entrada de menú a pantalla completa como tarjetas sobre las que el usuario puede moverse (adivinad qué vista utilizará el sistema operativo para implementar esto). La manera de implementarlo por tanto es muy conocida por cualquier desarrollador Android, pero vamos a repasarla.</p>

<p>Lo primero será crearnos la definición de nuestro menú, creamos un fichero xml en <strong><em>menu/activity_cards.xml</em></strong>. Los iconos los tenéis disponibles en el repositorio junto con el resto del código.</p>

<p>[code language=”xml”]</p>
<menu xmlns:android="http://schemas.android.com/apk/res/android">

    <item android:id="@+id/menu_read_aloud" android:icon="@drawable/ic_read_aloud" android:title="@string/menu_read_aloud" />

    <item android:id="@+id/menu_share" android:icon="@drawable/ic_share" android:title="@string/menu_share" />

    <item android:id="@+id/menu_close" android:icon="@drawable/ic_close" android:title="@string/menu_close" />

</menu>
<p>[/code]</p>

<p>Una vez tenemos nuestro menú, vamos a incorporarlo a la actividad. Para ello implementamos los métodos <strong><em>onCreateOptionsMenu()</em></strong> y <strong><em>onOptionsItemSelected()</em></strong> para crear el menú cuando sea necesario y realizar acciones cuando se seleccione un elemento del menú. Si quisieramos personalizar el menú en función del elemento sobre el que se hace la selección, podemos implementar el método <strong><em>onPrepareOptionsMenu()</em></strong> y ocultar/mostrar aquellos elementos que nos interese.</p>

<p>[code language=”java”]
…</p>

<div class="highlighter-rouge"><pre class="highlight"><code>@Override
public boolean onCreateOptionsMenu(Menu menu) {
    getMenuInflater().inflate(R.menu.activity_cards, menu);
    return true;
}

@Override
public boolean onOptionsItemSelected(MenuItem item) {
    switch (item.getItemId()) {
        case R.id.menu_read_aloud:
            onMenuReadAloud();
            break;
        case R.id.menu_share:
            onMenuShare();
            break;
        case R.id.menu_close:
            onMenuClose();
            break;
        default:
            return super.onOptionsItemSelected(item);
    }
    return true;
}
</code></pre>
</div>

<p>…
[/code]</p>

<p>Ya tenemos muestro menú montado, solo nos falta relacionar el <strong><em>onItemClick</em></strong> del <strong><em>CardScrollView</em></strong> con la apertura del menú y escribir código para cada una de las acciones. Lo primero es tan sencillo como esto:</p>

<p>[code language=”java”]
    @Override
    public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position, long id) {
        this.openOptionsMenu();
    }
[/code]</p>

<p>Pero vamos a complicar un poco el caso, por ejemplo no queremos que para el primer elemento del <strong><em>CardScrollView</em></strong> se muestre un menú. ¿Qué deberíamos hacer? Pues por un lado evitar llamar al método <strong><em>openOptionsMenu()</em></strong> cuando el usuario haga TAP sobre el primer elemento y muy importante, darle <strong>feedback al usuario de que en ese elemento no hay acciones</strong> posibles a realizar. Para esto segundo haremos uso del <strong><em>AudioManager</em></strong> y los sonidos del sistema, que específicamente en Glass están representados por constantes de la clase <strong><em>Sounds</em></strong>, en concreto la constante <em>DISALLOWED</em>. De la misma forma, para darle feedback al usuario de la apertura del menú, haremos lo mismo pero con la constante <em>TAP</em>.</p>

<p>Lo primero, obtener una instancia al <strong><em>AudioManager</em></strong> en el método <strong><em>onCreate()</em></strong>.</p>

<p>[code language=”java”]
    private AudioManager mAudioManager;</p>

<div class="highlighter-rouge"><pre class="highlight"><code>@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);

    mAudioManager = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
    ... [/code]
</code></pre>
</div>

<p>Ahora en el método <strong><em>onItemClick()</em></strong> hacemos lo siguiente:</p>

<p>[code language=”java”]
    @Override
    public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position, long id) {
        if (position == 0) {
            mAudioManager.playSoundEffect(Sounds.DISALLOWED);
        } else {
            mAudioManager.playSoundEffect(Sounds.TAP);
            this.openOptionsMenu();
        }
    }
[/code]</p>

<p>Ya tenemos la funcionalidad que queríamos, ahora el primer elemento no muestra el menú y da feedback al usuario de ello. Vamos ahora a darle funcionalidad a las acciones que teníamos. No vamos a implementarlas de verdad para no extendernos demasiado, solo vamos mostrar en el log del sistema que se han ejecutado.</p>

<p>[code language=”java”]
    private void onMenuReadAloud() {
        Log.i(“DEMO3”, “onMenuReadAloud()”);
    }</p>

<div class="highlighter-rouge"><pre class="highlight"><code>private void onMenuShare() {
    Log.i("DEMO3", "onMenuShare()");
}

private void onMenuClose() {
    Log.i("DEMO3", "onMenuClose()");
} [/code]
</code></pre>
</div>

<p>Y con esto lo tenemos todo, al ejecutar la aplicación y hacer TAP sobre una de las tarjetas con menú, se nos mostrará dándonos la opción a seleccionar la acción que queremos realizar.</p>

<p>[gallery link=”file” ids=”299,300,298”]</p>

<p>[sh_margin margin=”20”]</p>

<h3 id="buenas-prácticas">Buenas prácticas</h3>

<p>Por último vamos a comentar algunas buenas prácticas que envuelven a las interfaces en general de Googlas Glass y que tienen que ver con estos elementos que hemos visto hoy. Lo primero es la recomendación de siempre utilizar un <strong><em>CardScrollView</em></strong> en nuestras interfaces, aunque solo vayamos a mostrar una sola tarjeta. <strong><em>CardScrollView</em></strong> tiene esos <strong>efectos de rebote animados</strong> cuando el usuario llega al final, dándole un feedback muy importante de la no existencia de más elementos. Así pues, a menos que vayamos a utilizar el Swipe izquierda o derecha para otra cosa, hagamos uso del <strong><em>CardScrollView</em></strong>.</p>

<p>Otra buena práctica muy relacionada con ese feedback es informar al usuario de si su <strong>acción sobre el TouchPad ha sido reconocida o no</strong> mediante sonidos, como hemos podido ver en el código ejemplo. Debemos informar al usuario de qué ocurre cuando hace TAP, reproduciendo el sonido adecuado si no hay acción disponible.</p>

<p>Y hasta aquí hemos llegado en este artículo, como siempre tenéis disponible el código en el respositorio de GitHub de esta serie de artículos bajo la carpeta <strong>3.CardAPI</strong>.</p>

<p>[github repo=”raycoarana/google_glass_first_steps”]</p>

<p>[sh_margin margin=”20”]</p>

<h3 id="continuará">Continuará…</h3>

<p>Ahora que ya sabemos como manejar las tarjetas y mostrar acciones sobre ellas, vamos a ver cómo podemos trabajar con el Timeline, veremos cómo podemos crear tarjetas estáticas, tarjetas dináminas e incorporarlas en el Timeline, pudiendo el usuario interactuar con ellas sin la necesidad de abrir nuestra aplicación.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Voice triggers. Primeros pasos con Google Glass (III)</title>
	  <link>//blog/2014/03/primeros-pasos-con-google-glass-iii/</link>
	  <author>Rayco Araña</author>
	  <pubDate>2014-03-28T18:47:02+01:00</pubDate>
	  <guid>//blog/2014/03/primeros-pasos-con-google-glass-iii/</guid>
	  <description><![CDATA[
	     <p>En el anterior artículo sobre los primeros pasos con Google Glass empezamos a ver el concepto de <strong>Voice trigger</strong>, los comandos de voz que permiten lanzar nuestras aplicaciones. Vamos a hablar un poco más cerca de ellas y qué cosas podemos hacer a día de hoy con la API.</p>

<!-- more -->

<p>[sh_margin margin=”20”]</p>

<h3 id="voice-triggers-con-prompt">Voice triggers con prompt</h3>

<p>Una de las primeras cosas que podemos hacer con un Voice trigger es hacerle una pregunta al usuario. Es decir, el usuario dice <strong><em>Ok glass, google</em></strong>, entonces el sistema antes de abrir la aplicación de Google, abre una interfaz en la que muestra una pregunta y espera a que el usuario responda a ella. Luego una vez el usuario responde a la pregunta, lanza la aplicación proporcionando como parámetro el texto capturado.</p>

<p>[caption id=”attachment_258” align=”aligncenter” width=”300”]<a href="http://raycoarana.com/wp-content/uploads/2014/03/1.prompt.png"><img src="http://raycoarana.com/wp-content/uploads/2014/03/1.prompt-300x168.png" alt="Prompt de la aplicación de Google" /></a> Prompt de la aplicación de Google[/caption]</p>

<p>Para asociar un prompt a nuestro voice trigger es tan sencillo como añadir una etiqueta <strong><em>input</em></strong> con un atributo <strong><em>prompt</em></strong> dentro de la etiqueta <strong><em>trigger</em></strong> de la siguiente forma:</p>

<p>[code language=”xml”]
<?xml version="1.0" encoding="utf-8"?></p>
<trigger keyword="@string/glass_voice_trigger">
    <input prompt="@string/glass_voice_prompt" />
</trigger>
<p>[/code]</p>

<p>Así de sencillo, con esto cuando el usuario lance nuestra aplicación, el sistema mostrará esa interfaz y capturará lo dicho por el usuario. Pero, ¿cómo recibimos esa información en nuestra aplicación? Pues como no podía ser de otra forma, a través del <strong>Intent</strong>. Para obtenerlo, debemos usar la constante <strong>RecognizerIntent.EXTRA_RESULTS</strong>, con la que obtendremos una lista de String con cada una de las palabras capturadas.</p>

<p>[code language=”java”]
ArrayList<String> voiceResults = getIntent().getExtras()
        .getStringArrayList(RecognizerIntent.EXTRA_RESULTS);
[/code]</String></p>

<p>[sh_margin margin=”20”]</p>

<h3 id="creando-un-voice-trigger-con-prompt">Creando un Voice trigger con prompt</h3>

<p>Vamos a poner en práctica lo anterior, creamos una nueva actividad en nuestro proyecto (o creamos un proyecto nuevo como <a href="http://raycoarana.com/desarrollo/primeros-pasos-con-google-glass-ii/">ya vimos</a>) con su layout, donde vamos a mostrar el texto que hemos capturado del usuario.</p>

<p>Creamos un layout con nombre <strong>activity_askmesomething.xml</strong>, cuyo contenido será el siguiente.</p>

<p>[code language=”xml”]</p>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android" android:orientation="vertical" android:layout_width="match_parent" android:layout_height="match_parent" android:gravity="center">

    <TextView android:layout_width="match_parent" android:layout_height="wrap_content" android:gravity="center" android:textSize="18sp" android:text="I ask you something and you respond" />

    <TextView android:id="@+id/captured_input" android:layout_width="match_parent" android:layout_height="wrap_content" android:gravity="center" />

</LinearLayout>
<p>[/code]</p>

<p>Ahora creamos la actividad, enlazando con este layout.</p>

<p>[code language=”java”]
public class AskMeSomethingActivity extends Activity {</p>

<div class="highlighter-rouge"><pre class="highlight"><code>@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_askmesomething);
} } [/code]
</code></pre>
</div>

<p>Ahora vamos a obtener una referencia al <strong>TextView</strong> donde vamos a mostrar el texto capturado, recomponemos el texto capturado con un <strong>StringBuilder</strong> y lo asignamos al <strong>TextView</strong>. Quedaría algo así:</p>

<p>[code language=”java”]
…
        ArrayList<String> voiceResults = getIntent().getExtras()
                .getStringArrayList(RecognizerIntent.EXTRA_RESULTS);</String></p>

<div class="highlighter-rouge"><pre class="highlight"><code>    StringBuilder inputBuilder = new StringBuilder();
    for(String voiceToken : voiceResults) {
        inputBuilder.append(voiceToken);
        inputBuilder.append(" ");
    }

    TextView capturedInputText = (TextView)findViewById(R.id.captured_input);
    capturedInputText.setText(inputBuilder.toString()); ... [/code]
</code></pre>
</div>

<p>Ya por último nos queda crear el Voice trigger y añadir la nueva actividad al <strong>AndroidManifest.xml</strong>. Lo primero el Voice trigger, añadimos un nuevo fichero xml que llamamos <strong><em>askmesomething_trigger.xml</em></strong> con el siguiente contenido, nada que ya no hayamos visto antes.</p>

<p>[code language=”xml”]</p>
<trigger keyword="@string/trigger_ask_me_something">
    <input prompt="@string/prompt_ask_me_something" />
</trigger>
<p>[/code]</p>

<p>Modificamos el fichero <strong><em>strings.xml</em></strong> para agregar las nuevas cadenas.</p>

<p>[code language=”xml”]</p>
<string name="trigger_ask_me_something">ask me something</string>
<string name="prompt_ask_me_something">What\'s your favourite color?</string>
<p>[/code]</p>

<p>Y por último agregamos la actividad al <strong><em>AndroidManifest.xml</em></strong>.</p>

<p>[code language=”xml”]
…
        <activity android:name=".AskMeSomethingActivity" android:label="@string/app_name">
            <intent-filter>
                <action android:name="com.google.android.glass.action.VOICE_TRIGGER"></action>
            </intent-filter></activity></p>

<div class="highlighter-rouge"><pre class="highlight"><code>        &lt;meta-data android:name="com.google.android.glass.VoiceTrigger"
            android:resource="@xml/askmesomething_trigger" /&gt;
    &lt;/activity&gt; ... [/code]
</code></pre>
</div>

<p>Y ya tenemos todo listo, ahora solo nos falta lanzar la aplicación, decir <strong><em>Ok glass, ask me something</em></strong> y veremos la siguiente pantalla:</p>

<p>[caption id=”attachment_259” align=”aligncenter” width=”300”]<a href="http://raycoarana.com/wp-content/uploads/2014/03/2.our_prompt.png"><img src="http://raycoarana.com/wp-content/uploads/2014/03/2.our_prompt-300x168.png" alt="Prompt de nuestra aplicación" /></a> Prompt de nuestra aplicación[/caption]</p>

<p>Al responder a la pregunta, se lanzará nuestra aplicación, mostrando por pantalla lo capturado:</p>

<p>[caption id=”attachment_260” align=”aligncenter” width=”300”]<a href="http://raycoarana.com/wp-content/uploads/2014/03/3.horse_is_black.png"><img src="http://raycoarana.com/wp-content/uploads/2014/03/3.horse_is_black-300x168.png" alt="Pantalla con el resultado de la captura" /></a> Pantalla con el resultado de la captura[/caption]</p>

<p>[sh_margin margin=”20”]</p>

<h3 id="restricciones">Restricciones</h3>

<p>Una última cosa que nos queda por comentar de los Voice triggers es la posibilidad de <strong>deshabilitarlos en función del estado del sistema</strong>, es decir, si alguna de las características del dispositivo no está disponible por la razón que fuera, el sistema deshabilita aquellos comandos de voz que lo requieran. Actualmente existen tres:</p>

<ul>
  <li>
    <p>camera</p>
  </li>
  <li>
    <p>network</p>
  </li>
  <li>
    <p>microphone</p>
  </li>
</ul>

<p>Por ejemplo, si nuestra aplicación requiere de conexión a internet, podemos limitar su uso con el siguiente código, donde podemos ver que se ha añadido la etiqueta <strong>constraints</strong> con el atributo <strong>network</strong> a <strong>true</strong>.</p>

<p>[code language=”xml”]</p>
<trigger keyword="@string/trigger_ask_me_something">
    <constraints network="true" />
</trigger>
<p>[/code]</p>

<p>Y esto es todo, el código de este artículo lo tenéis en el repositorio de esta serie de artículos, bajo la carpeta <strong>2.VoiceTriggers</strong>.</p>

<p>[github repo=”raycoarana/google_glass_first_steps”]</p>

<p>[sh_margin margin=”20”]</p>

<h3 id="continuará">Continuará…</h3>

<p>En el próximo artículo vamos a empezar a trabajar con la <strong>Card API</strong> para crear una interfaz con la que podamos navegar e interactuar. Veremos cómo utilizar las clases <em>Card</em>, <em>CardScrollView</em> y <em>CardScrollAdapter</em> para conseguir una interfaz similar a la que podemos ver en las aplicaciones Google Glass, sin ir más lejos, el propio <strong>Timeline</strong> usa esta dinámica.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Primeros pasos con Google Glass (II)</title>
	  <link>//blog/2014/03/primeros-pasos-con-google-glass-ii/</link>
	  <author>Rayco Araña</author>
	  <pubDate>2014-03-26T08:42:01+01:00</pubDate>
	  <guid>//blog/2014/03/primeros-pasos-con-google-glass-ii/</guid>
	  <description><![CDATA[
	     <p>Siguiendo la serie de artículos de primeros pasos Google Glass, toca empezar a ponernos manos a la obra con nuestra primera aplicación. En el último artículo sobre Google Glass, dimos un vistazo general de sus características técnicas y de uso, que nos sirve para tener idea de que se puede y que no se puede hacer con ellas. Si bien hay que tener en cuenta que estamos ante un producto que está aún en una fase temprana de desarrollo y que muchas cosas cambiarán hasta que su salida a la venta al público general.</p>

<!-- more -->

<p>Si no lo has leído, te recomiendo que hagas un repaso rápido al artículo antes de seguir con este, ya que te aclarará aspectos básicos de Google Glass.</p>

<p>[sh_margin margin=”20”]</p>

<h3 id="configurando-el-entorno-de-desarrollo">Configurando el entorno de desarrollo</h3>

<p>El primer paso necesario para desarrollar para Google Glass será hacernos con el <strong>GDK (Glass Development Kit)</strong>, actualmente se encuentra disponible la versión <strong>Sneak Peak</strong>, que nos da indicaciones de que es en <strong>una versión muy inmadura</strong> y todo puede cambiar de una actualización a otra sin previo aviso.</p>

<p>Para instalar el GDK, nos vamos a Android Studio (actualmente versión 0.5.2), y abrimos el SDK Manager. Como comentamos en el artículo anterior, Google Glass funciona con Android 4.0.3, por lo que el GDK lo veremos bajo grupo <strong>Android 4.0.3 (API 15)</strong>, ahí encontraremos el Glass Development Kit Sneak Peek listo para instalar.</p>

<p>[caption id=”attachment_220” align=”aligncenter” width=”300”]<a href="http://raycoarana.com/wp-content/uploads/2014/02/1.InstalandoGDK.png"><img src="http://raycoarana.com/wp-content/uploads/2014/02/1.InstalandoGDK-300x214.png" alt="Instalando GDK" /></a> Instalando GDK[/caption]</p>

<p>Una vez instalado el GDK, ya podemos comenzar el desarrollo de nuestra primera aplicación. Antes os debo dar una mala noticia, a día de hoy <strong>no existe un emulador de Google Glass</strong>, así que no busquéis una imagen del sistema para Google Glass. A día de hoy la única forma de probar una aplicación Google Glass <strong>es tener una físicamente</strong> sobre la que instalar y depurar las mismas.</p>

<p>[sh_margin margin=”20”]</p>

<h3 id="creación-del-proyecto">Creación del proyecto</h3>

<p>Vamos a crear nuestra primera aplicación, para ello iniciamos el asistente de nuevo proyecto en nuestro Android Studio y lo configuramos como podéis ver en la siguiente imagen. Básicamente dado que Google Glass a día de hoy funciona solo con Android 4.0.3, pondremos este nivel de API como <strong><em>Minimum required SDK</em></strong> y <strong><em>Target SDK</em></strong>. Así tendremos la seguridad de no utilizar API que no tengamos disponible. Si en un futuro como ya se comienza a rumorear se actualiza Glass a una versión de Android más nueva, sería conveniente cambiar el <strong><em>Target SDK</em></strong> a la nueva versión.
Por último, vamos a poner en <strong><em>Compile with</em></strong> no la API 15, sino el <strong>Glass Development Kit Sneak Peak (Google Inc.) (API 15)</strong>. Os recomiendo desmarcar la opción de crear una primera actividad, a mi siempre me gusta <strong>partir de un proyecto vacío</strong> y crear, más que partir de un proyecto lleno de código demo y tener que estar haciendo limpieza.</p>

<p>[caption id=”attachment_225” align=”aligncenter” width=”300”]<a href="http://raycoarana.com/wp-content/uploads/2014/02/2.CreandoElProyecto.png"><img src="http://raycoarana.com/wp-content/uploads/2014/02/2.CreandoElProyecto-300x194.png" alt="Creando el proyecto" /></a> Creando el proyecto[/caption]</p>

<p>[sh_margin margin=”20”]</p>

<h3 id="retocando-el-buildgradle">Retocando el build.gradle</h3>

<p>Una vez Android Studio termina de generarnos el proyecto, lo cierto es que al menos hasta la versión 0.5.2, tiene un bug por el que no genera bien el <em>app/build.gradle</em>. La opción de configuración que hemos puesto en el asistente como <strong><em>Compile with</em></strong> no la pone en el fichero de gradle. Para solucionarlo, lo abrimos y lo modificamos para que <em><strong>compileSdkVersion</strong></em> apunte al GDK quedando así:</p>

<p>[code language=”plain”]
apply plugin: ‘android’</p>

<p>android {
    compileSdkVersion “Google Inc.:Glass Development Kit Sneak Peek:15”
    buildToolsVersion “19.0.2”</p>

<div class="highlighter-rouge"><pre class="highlight"><code>defaultConfig {
    minSdkVersion 15
    targetSdkVersion 15 ... [/code]
</code></pre>
</div>

<p>[sh_margin margin=”20”]</p>

<h3 id="androidmanifest-y-estilos">AndroidManifest y estilos</h3>

<p>El siguiente paso que debemos hacer será modificar el <strong><em>AndroidManifest.xml</em></strong> para requerir el GDK. Esto es opcional, si no lo requerimos no pasa nada, pero hay que tener en cuenta que entonces nuestra aplicación <strong>se podría instalar en otros dispositivos</strong> y al no tener estos la API del GDK, <strong>fallará</strong> al no encontrarlas.</p>

<p>Necesitamos agregar el siguiente trozo de código dentro de la etiqueta <em><strong>application</strong></em>:</p>

<p>[code language=”xml”]</p>
<uses-library android:name="com.google.android.glass" android:required="true" />

<p>[/code]</p>

<p>Para terminar de configurar el proyecto antes de comenzar a escribir código de verdad, tendremos que modificar el fichero <strong><em>res/values/styles.xml</em></strong>, para cambiar el tema base que usará nuestra aplicación. Si dejamos el que pone Android Studio, <strong>nos aparecerá en nuestra aplicación Google Glass el Action Bar</strong>, cosa nada deseable. Debemos configurar el tema para que herede del tema que trae el sistema por defecto, quedando nuestro fichero <strong><em>styles.xml</em></strong> de la siguiente forma:</p>

<p>[code language=”xml”]</p>
<resources>

    <!-- Base application theme. -->
    <style name="AppTheme" parent="@android:style/Theme.DeviceDefault">
        <!-- Customize your theme here. -->
    </style>

</resources>
<p>[/code]</p>

<p>Y para hacer algo de limpieza en el proyecto, os recomiendo borrar las carpetas <em>drawable-mdpi</em>, <em>drawable-xhdpi</em>, <em>drawable-xxhdpi</em>, ya que Google Glass utiliza una resolución hdpi y en el estado actual veo poco recomendable dedicar tiempo a generar los recursos gráficos para todas esas densidades de píxel cuando en la actualidad solo se utiliza una.</p>

<p>[sh_margin margin=”20”]</p>

<h3 id="helloworld-from-glass">Helloworld from Glass!</h3>

<p>Ya tenemos nuestro proyecto listo para comenzar a desarrollar, los pasos anteriores hasta que mejore el soporte de Android Studio para el desarrollo de Glassware, serán el pan de cada día. A partir de ahora, vamos a generar una simple actividad, que muestre un mensaje en pantalla y configuraremos nuestra aplicación para que el usuario pueda lanzarla con un comando de voz.</p>

<p>Creamos una nueva clase llamada <strong><em>HelloWorldActivity</em></strong>, haciendo que extienda de <strong><em>Activity</em></strong>. Y como siempre en cualquier aplicación Android, sobrescribimos el método <em><strong>onCreate()</strong></em> y establecemos el layout para nuestra actividad.</p>

<p>[code language=”java”]
import android.app.Activity;
import android.os.Bundle;</p>

<p>public class HelloWorldActivity extends Activity {</p>

<div class="highlighter-rouge"><pre class="highlight"><code>@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_helloworld);
} } [/code]
</code></pre>
</div>

<p>A continuación, ya sea con el acceso directo (Alt + Enter con el cursor sobre layout) o directamente creando el layout en la carpeta <strong><em>res/layout/activity_helloworld.xml</em></strong>, generamos nuestra vista. En ella utilizaremos un simple TextView de la siguiente forma:</p>

<p>[code language=”xml”]
<?xml version="1.0" encoding="utf-8"?></p>

<TextView xmlns:android="http://schemas.android.com/apk/res/android" android:layout_width="match_parent" android:layout_height="match_parent" android:gravity="center" android:text="HelloWorld!" />

<p>[/code]</p>

<p>Ahora que ya tenemos nuestra actividad, vamos a crear el lanzador por comando de voz. Para ello tenemos que <strong>crear un Voice Trigger</strong>. Un Voice Trigger es un pequeño fichero XML en el que indicamos a Android el <strong>comando de voz</strong> que queremos que lance nuestra aplicación. Para ello, crear un fichero en <strong><em>res/xml/trigger.xml</em></strong>. En él, pondremos el siguiente código:</p>

<p>[code language=”xml”]
<?xml version="1.0" encoding="utf-8"?></p>

<trigger keyword="@string/glass_voice_trigger" />

<p>[/code]</p>

<p>Muy simple, solo estamos indicando cuál es la frase que lanza nuestra aplicación. Vamos ahora a nuestro fichero <em><strong>res/values/string.xml</strong></em> y creamos la cadena <strong><em>glass_voice_trigger</em></strong> con el valor <em>say hello</em>.</p>

<p>[code language=”xml”]</p>
<resources>

...

    <string name="glass_voice_trigger">say hello</string>

...

</resources>
<p>[/code]</p>

<p>Pero, ¿cómo relaciona Glass el comando de voz con la actividad que queremos que lance? Pues como siempre en Android, todo ello se configura como un <strong><em>intent-filter</em></strong>, con el cual indicaremos al sistema qué comando de voz queremos que dispare nuestra actividad. Nos vamos al <strong><em>AndroidManifest.xml</em></strong> y agregamos la actividad que hemos creado, añadiendo un <strong><em>intent-filter</em></strong> que capture la acción <strong><em>com.google.android.glass.action.VOICE_TRIGGER</em></strong> y añadimos como metadatos el fichero xml que creamos anteriormente, quedando así:</p>

<p>[code language=”xml”]
…
    &lt;application …&gt;</p>

<div class="highlighter-rouge"><pre class="highlight"><code>    ...

    &lt;activity
        android:name=".HelloWorldActivity"
        android:label="@string/app_name"&gt;
        &lt;intent-filter&gt;
            &lt;action android:name="com.google.android.glass.action.VOICE_TRIGGER" /&gt;
        &lt;/intent-filter&gt;

        &lt;meta-data android:name="com.google.android.glass.VoiceTrigger"
                   android:resource="@xml/trigger" /&gt;
    &lt;/activity&gt;

&lt;/application&gt; ... [/code]
</code></pre>
</div>

<p>Y con esto ya tenemos nuestra aplicación lista para ser lanzada. Conectamos la Google Glass y lanzamos la aplicación. Una cosa que notaréis es que el entorno os dirá que no tenéis definido ninguna actividad principal. Ignoradlo y haced que se lance sin configurar ninguna actividad por defecto.</p>

<p>[caption id=”attachment_246” align=”aligncenter” width=”180”]<a href="http://raycoarana.com/wp-content/uploads/2014/02/3.LanzandoLaApp.png"><img src="http://raycoarana.com/wp-content/uploads/2014/02/3.LanzandoLaApp-180x300.png" alt="Configurar el lanzamiento de nuestra app" /></a> Configurar el lanzamiento de nuestra app[/caption]</p>

<p>Una vez instalada, solo nos queda decir “Ok glass, say hello”. En el desarrollo normal de la aplicación, nos interesará que esta se lance directamente sin tener que decir el comando de voz, simplemente tenemos que volver a acceder a la pantalla anterior y establecer la actividad que queremos que se inicie cada vez que lancemos la aplicación desde Android Studio.</p>

<p>[caption id=”attachment_247” align=”aligncenter” width=”300”]<a href="http://raycoarana.com/wp-content/uploads/2014/02/4.HelloWorld.png"><img src="http://raycoarana.com/wp-content/uploads/2014/02/4.HelloWorld-300x168.png" alt="App HelloWorld" /></a> App HelloWorld[/caption]</p>

<p>El código de este artículo lo tenéis en el siguiente repositorio, bajo la carpeta <strong>1.Helloworld</strong>. <em>Happy coding!</em></p>

<p>[github repo=”raycoarana/google_glass_first_steps”]</p>

<p>[sh_margin margin=”20”]</p>

<h3 id="continuará">Continuará…</h3>

<p>En el próximo artículo veremos cómo jugar un poco más con los trigger, qué configuración nos permite y cómo podemos obtener datos de lo que nos diga el usuario.</p>

	  ]]></description>
	</item>


</channel>
</rss>
